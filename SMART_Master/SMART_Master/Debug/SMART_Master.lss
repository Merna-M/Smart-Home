
SMART_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000230  00800060  000017be  00001852  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800290  00800290  00001a82  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002150  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000021d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c6e  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070e  00000000  00000000  00003fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d31  00000000  00000000  000046d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  00005408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000527  00000000  00000000  000057b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ac7  00000000  00000000  00005cdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_10>
      2c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 43 05 	call	0xa86	; 0xa86 <main>
      8a:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vSetPinDir>:


void DIO_vSetPinDir (uint8 Copy_u8Port , uint8 Copy_u8Pin , uint8 Copy_u8Dir)
{
	//switch the selected port
	switch(Copy_u8Port) 
      92:	84 34       	cpi	r24, 0x44	; 68
      94:	09 f4       	brne	.+2      	; 0x98 <DIO_vSetPinDir+0x6>
      96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_vSetPinDir+0xe8>
      98:	85 34       	cpi	r24, 0x45	; 69
      9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vSetPinDir+0x1c>
      9c:	82 34       	cpi	r24, 0x42	; 66
      9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vSetPinDir+0x74>
      a0:	83 34       	cpi	r24, 0x43	; 67
      a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vSetPinDir+0x14>
      a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_vSetPinDir+0xae>
      a6:	81 34       	cpi	r24, 0x41	; 65
      a8:	09 f0       	breq	.+2      	; 0xac <DIO_vSetPinDir+0x1a>
      aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vSetPinDir+0x120>
      ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vSetPinDir+0x3a>
      ae:	82 36       	cpi	r24, 0x62	; 98
      b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vSetPinDir+0x74>
      b2:	83 36       	cpi	r24, 0x63	; 99
      b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vSetPinDir+0x2c>
      b6:	81 36       	cpi	r24, 0x61	; 97
      b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vSetPinDir+0x2a>
      ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vSetPinDir+0x120>
      bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vSetPinDir+0x3a>
      be:	83 36       	cpi	r24, 0x63	; 99
      c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vSetPinDir+0x32>
      c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_vSetPinDir+0xae>
      c4:	84 36       	cpi	r24, 0x64	; 100
      c6:	09 f0       	breq	.+2      	; 0xca <DIO_vSetPinDir+0x38>
      c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vSetPinDir+0x120>
      ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_vSetPinDir+0xe8>
	{
		case 'A':
		case 'a':	//PortA
		if (Copy_u8Dir == 1)	//direction is output
      cc:	41 30       	cpi	r20, 0x01	; 1
      ce:	69 f4       	brne	.+26     	; 0xea <DIO_vSetPinDir+0x58>
		{
			SET_BIT(DDRA , Copy_u8Pin);
      d0:	2a b3       	in	r18, 0x1a	; 26
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	ac 01       	movw	r20, r24
      d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vSetPinDir+0x4c>
      da:	44 0f       	add	r20, r20
      dc:	55 1f       	adc	r21, r21
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vSetPinDir+0x48>
      e2:	ba 01       	movw	r22, r20
      e4:	62 2b       	or	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
		}
		else                   //direction is input
		{
			CLR_BIT(DDRA , Copy_u8Pin);
      ea:	2a b3       	in	r18, 0x1a	; 26
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	ac 01       	movw	r20, r24
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vSetPinDir+0x66>
      f4:	44 0f       	add	r20, r20
      f6:	55 1f       	adc	r21, r21
      f8:	6a 95       	dec	r22
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vSetPinDir+0x62>
      fc:	ba 01       	movw	r22, r20
      fe:	60 95       	com	r22
     100:	62 23       	and	r22, r18
     102:	6a bb       	out	0x1a, r22	; 26
     104:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':	//PortB
		if (Copy_u8Dir == 1)
     106:	41 30       	cpi	r20, 0x01	; 1
     108:	69 f4       	brne	.+26     	; 0x124 <DIO_vSetPinDir+0x92>
		{
			SET_BIT(DDRB , Copy_u8Pin);
     10a:	27 b3       	in	r18, 0x17	; 23
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	ac 01       	movw	r20, r24
     112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vSetPinDir+0x86>
     114:	44 0f       	add	r20, r20
     116:	55 1f       	adc	r21, r21
     118:	6a 95       	dec	r22
     11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vSetPinDir+0x82>
     11c:	ba 01       	movw	r22, r20
     11e:	62 2b       	or	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB , Copy_u8Pin);
     124:	27 b3       	in	r18, 0x17	; 23
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	ac 01       	movw	r20, r24
     12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vSetPinDir+0xa0>
     12e:	44 0f       	add	r20, r20
     130:	55 1f       	adc	r21, r21
     132:	6a 95       	dec	r22
     134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vSetPinDir+0x9c>
     136:	ba 01       	movw	r22, r20
     138:	60 95       	com	r22
     13a:	62 23       	and	r22, r18
     13c:	67 bb       	out	0x17, r22	; 23
     13e:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':	//PortC
		if (Copy_u8Dir == 1)
     140:	41 30       	cpi	r20, 0x01	; 1
     142:	69 f4       	brne	.+26     	; 0x15e <DIO_vSetPinDir+0xcc>
		{
			SET_BIT(DDRC , Copy_u8Pin);
     144:	24 b3       	in	r18, 0x14	; 20
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	ac 01       	movw	r20, r24
     14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vSetPinDir+0xc0>
     14e:	44 0f       	add	r20, r20
     150:	55 1f       	adc	r21, r21
     152:	6a 95       	dec	r22
     154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vSetPinDir+0xbc>
     156:	ba 01       	movw	r22, r20
     158:	62 2b       	or	r22, r18
     15a:	64 bb       	out	0x14, r22	; 20
     15c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC , Copy_u8Pin);
     15e:	24 b3       	in	r18, 0x14	; 20
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	ac 01       	movw	r20, r24
     166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vSetPinDir+0xda>
     168:	44 0f       	add	r20, r20
     16a:	55 1f       	adc	r21, r21
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vSetPinDir+0xd6>
     170:	ba 01       	movw	r22, r20
     172:	60 95       	com	r22
     174:	62 23       	and	r22, r18
     176:	64 bb       	out	0x14, r22	; 20
     178:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':	//PortD
		if (Copy_u8Dir == 1)
     17a:	41 30       	cpi	r20, 0x01	; 1
     17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vSetPinDir+0x106>
		{
			SET_BIT(DDRD , Copy_u8Pin);
     17e:	21 b3       	in	r18, 0x11	; 17
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	ac 01       	movw	r20, r24
     186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vSetPinDir+0xfa>
     188:	44 0f       	add	r20, r20
     18a:	55 1f       	adc	r21, r21
     18c:	6a 95       	dec	r22
     18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vSetPinDir+0xf6>
     190:	ba 01       	movw	r22, r20
     192:	62 2b       	or	r22, r18
     194:	61 bb       	out	0x11, r22	; 17
     196:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD , Copy_u8Pin);
     198:	21 b3       	in	r18, 0x11	; 17
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	ac 01       	movw	r20, r24
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vSetPinDir+0x114>
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vSetPinDir+0x110>
     1aa:	ba 01       	movw	r22, r20
     1ac:	60 95       	com	r22
     1ae:	62 23       	and	r22, r18
     1b0:	61 bb       	out	0x11, r22	; 17
     1b2:	08 95       	ret

000001b4 <DIO_vWritePin>:
}


void DIO_vWritePin (uint8 Copy_u8Port , uint8 Copy_u8Pin , uint8 Copy_u8Value)
{
	switch (Copy_u8Port)
     1b4:	84 34       	cpi	r24, 0x44	; 68
     1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_vWritePin+0x6>
     1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_vWritePin+0xe8>
     1ba:	85 34       	cpi	r24, 0x45	; 69
     1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_vWritePin+0x1c>
     1be:	82 34       	cpi	r24, 0x42	; 66
     1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_vWritePin+0x74>
     1c2:	83 34       	cpi	r24, 0x43	; 67
     1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_vWritePin+0x14>
     1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_vWritePin+0xae>
     1c8:	81 34       	cpi	r24, 0x41	; 65
     1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vWritePin+0x1a>
     1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_vWritePin+0x120>
     1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_vWritePin+0x3a>
     1d0:	82 36       	cpi	r24, 0x62	; 98
     1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_vWritePin+0x74>
     1d4:	83 36       	cpi	r24, 0x63	; 99
     1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_vWritePin+0x2c>
     1d8:	81 36       	cpi	r24, 0x61	; 97
     1da:	09 f0       	breq	.+2      	; 0x1de <DIO_vWritePin+0x2a>
     1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_vWritePin+0x120>
     1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_vWritePin+0x3a>
     1e0:	83 36       	cpi	r24, 0x63	; 99
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_vWritePin+0x32>
     1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_vWritePin+0xae>
     1e6:	84 36       	cpi	r24, 0x64	; 100
     1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_vWritePin+0x38>
     1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_vWritePin+0x120>
     1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_vWritePin+0xe8>
	{
		case 'A':
		case 'a':	//PortA
		if (Copy_u8Value == 1)
     1ee:	41 30       	cpi	r20, 0x01	; 1
     1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_vWritePin+0x58>
		{
			SET_BIT(PORTA , Copy_u8Pin);
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	ac 01       	movw	r20, r24
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_vWritePin+0x4c>
     1fc:	44 0f       	add	r20, r20
     1fe:	55 1f       	adc	r21, r21
     200:	6a 95       	dec	r22
     202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_vWritePin+0x48>
     204:	ba 01       	movw	r22, r20
     206:	62 2b       	or	r22, r18
     208:	6b bb       	out	0x1b, r22	; 27
     20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA , Copy_u8Pin);
     20c:	2b b3       	in	r18, 0x1b	; 27
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	ac 01       	movw	r20, r24
     214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vWritePin+0x66>
     216:	44 0f       	add	r20, r20
     218:	55 1f       	adc	r21, r21
     21a:	6a 95       	dec	r22
     21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vWritePin+0x62>
     21e:	ba 01       	movw	r22, r20
     220:	60 95       	com	r22
     222:	62 23       	and	r22, r18
     224:	6b bb       	out	0x1b, r22	; 27
     226:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':	//PortB
		if (Copy_u8Value == 1)
     228:	41 30       	cpi	r20, 0x01	; 1
     22a:	69 f4       	brne	.+26     	; 0x246 <DIO_vWritePin+0x92>
		{
			SET_BIT(PORTB , Copy_u8Pin);
     22c:	28 b3       	in	r18, 0x18	; 24
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	ac 01       	movw	r20, r24
     234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vWritePin+0x86>
     236:	44 0f       	add	r20, r20
     238:	55 1f       	adc	r21, r21
     23a:	6a 95       	dec	r22
     23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vWritePin+0x82>
     23e:	ba 01       	movw	r22, r20
     240:	62 2b       	or	r22, r18
     242:	68 bb       	out	0x18, r22	; 24
     244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB , Copy_u8Pin);
     246:	28 b3       	in	r18, 0x18	; 24
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	ac 01       	movw	r20, r24
     24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vWritePin+0xa0>
     250:	44 0f       	add	r20, r20
     252:	55 1f       	adc	r21, r21
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vWritePin+0x9c>
     258:	ba 01       	movw	r22, r20
     25a:	60 95       	com	r22
     25c:	62 23       	and	r22, r18
     25e:	68 bb       	out	0x18, r22	; 24
     260:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':	//PortC
		if (Copy_u8Value == 1)
     262:	41 30       	cpi	r20, 0x01	; 1
     264:	69 f4       	brne	.+26     	; 0x280 <DIO_vWritePin+0xcc>
		{
			SET_BIT(PORTC , Copy_u8Pin);
     266:	25 b3       	in	r18, 0x15	; 21
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	ac 01       	movw	r20, r24
     26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vWritePin+0xc0>
     270:	44 0f       	add	r20, r20
     272:	55 1f       	adc	r21, r21
     274:	6a 95       	dec	r22
     276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vWritePin+0xbc>
     278:	ba 01       	movw	r22, r20
     27a:	62 2b       	or	r22, r18
     27c:	65 bb       	out	0x15, r22	; 21
     27e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC , Copy_u8Pin);
     280:	25 b3       	in	r18, 0x15	; 21
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	ac 01       	movw	r20, r24
     288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vWritePin+0xda>
     28a:	44 0f       	add	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	6a 95       	dec	r22
     290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vWritePin+0xd6>
     292:	ba 01       	movw	r22, r20
     294:	60 95       	com	r22
     296:	62 23       	and	r22, r18
     298:	65 bb       	out	0x15, r22	; 21
     29a:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':	//PortD
		if (Copy_u8Value == 1)
     29c:	41 30       	cpi	r20, 0x01	; 1
     29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_vWritePin+0x106>
		{
			SET_BIT(PORTD , Copy_u8Pin);
     2a0:	22 b3       	in	r18, 0x12	; 18
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	ac 01       	movw	r20, r24
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vWritePin+0xfa>
     2aa:	44 0f       	add	r20, r20
     2ac:	55 1f       	adc	r21, r21
     2ae:	6a 95       	dec	r22
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vWritePin+0xf6>
     2b2:	ba 01       	movw	r22, r20
     2b4:	62 2b       	or	r22, r18
     2b6:	62 bb       	out	0x12, r22	; 18
     2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD , Copy_u8Pin);
     2ba:	22 b3       	in	r18, 0x12	; 18
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	ac 01       	movw	r20, r24
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vWritePin+0x114>
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	6a 95       	dec	r22
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vWritePin+0x110>
     2cc:	ba 01       	movw	r22, r20
     2ce:	60 95       	com	r22
     2d0:	62 23       	and	r22, r18
     2d2:	62 bb       	out	0x12, r22	; 18
     2d4:	08 95       	ret

000002d6 <DIO_vTogglePin>:
}


void DIO_vTogglePin (uint8 Copy_u8Port , uint8 Copy_u8Pin)
{
	switch (Copy_u8Port)
     2d6:	84 34       	cpi	r24, 0x44	; 68
     2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_vTogglePin+0x6>
     2da:	3d c0       	rjmp	.+122    	; 0x356 <DIO_vTogglePin+0x80>
     2dc:	85 34       	cpi	r24, 0x45	; 69
     2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_vTogglePin+0x1a>
     2e0:	82 34       	cpi	r24, 0x42	; 66
     2e2:	f9 f0       	breq	.+62     	; 0x322 <DIO_vTogglePin+0x4c>
     2e4:	83 34       	cpi	r24, 0x43	; 67
     2e6:	50 f5       	brcc	.+84     	; 0x33c <DIO_vTogglePin+0x66>
     2e8:	81 34       	cpi	r24, 0x41	; 65
     2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_vTogglePin+0x18>
     2ec:	40 c0       	rjmp	.+128    	; 0x36e <DIO_vTogglePin+0x98>
     2ee:	0c c0       	rjmp	.+24     	; 0x308 <DIO_vTogglePin+0x32>
     2f0:	82 36       	cpi	r24, 0x62	; 98
     2f2:	b9 f0       	breq	.+46     	; 0x322 <DIO_vTogglePin+0x4c>
     2f4:	83 36       	cpi	r24, 0x63	; 99
     2f6:	18 f4       	brcc	.+6      	; 0x2fe <DIO_vTogglePin+0x28>
     2f8:	81 36       	cpi	r24, 0x61	; 97
     2fa:	c9 f5       	brne	.+114    	; 0x36e <DIO_vTogglePin+0x98>
     2fc:	05 c0       	rjmp	.+10     	; 0x308 <DIO_vTogglePin+0x32>
     2fe:	83 36       	cpi	r24, 0x63	; 99
     300:	e9 f0       	breq	.+58     	; 0x33c <DIO_vTogglePin+0x66>
     302:	84 36       	cpi	r24, 0x64	; 100
     304:	a1 f5       	brne	.+104    	; 0x36e <DIO_vTogglePin+0x98>
     306:	27 c0       	rjmp	.+78     	; 0x356 <DIO_vTogglePin+0x80>
	{
		case 'A':
		case 'a':
		TOGGLE_BIT(PORTA , Copy_u8Pin);
     308:	2b b3       	in	r18, 0x1b	; 27
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	ac 01       	movw	r20, r24
     310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_vTogglePin+0x40>
     312:	44 0f       	add	r20, r20
     314:	55 1f       	adc	r21, r21
     316:	6a 95       	dec	r22
     318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_vTogglePin+0x3c>
     31a:	ba 01       	movw	r22, r20
     31c:	62 27       	eor	r22, r18
     31e:	6b bb       	out	0x1b, r22	; 27
		break;
     320:	08 95       	ret
		
		case 'B':
		case 'b':
		TOGGLE_BIT(PORTB , Copy_u8Pin);
     322:	28 b3       	in	r18, 0x18	; 24
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	ac 01       	movw	r20, r24
     32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_vTogglePin+0x5a>
     32c:	44 0f       	add	r20, r20
     32e:	55 1f       	adc	r21, r21
     330:	6a 95       	dec	r22
     332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_vTogglePin+0x56>
     334:	ba 01       	movw	r22, r20
     336:	62 27       	eor	r22, r18
     338:	68 bb       	out	0x18, r22	; 24
		break;
     33a:	08 95       	ret
		
		case 'C':
		case 'c':
		TOGGLE_BIT(PORTC , Copy_u8Pin);
     33c:	25 b3       	in	r18, 0x15	; 21
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	ac 01       	movw	r20, r24
     344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_vTogglePin+0x74>
     346:	44 0f       	add	r20, r20
     348:	55 1f       	adc	r21, r21
     34a:	6a 95       	dec	r22
     34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_vTogglePin+0x70>
     34e:	ba 01       	movw	r22, r20
     350:	62 27       	eor	r22, r18
     352:	65 bb       	out	0x15, r22	; 21
		break;
     354:	08 95       	ret
		
		case 'D':
		case 'd':
		TOGGLE_BIT(PORTD , Copy_u8Pin);
     356:	22 b3       	in	r18, 0x12	; 18
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	ac 01       	movw	r20, r24
     35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_vTogglePin+0x8e>
     360:	44 0f       	add	r20, r20
     362:	55 1f       	adc	r21, r21
     364:	6a 95       	dec	r22
     366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_vTogglePin+0x8a>
     368:	ba 01       	movw	r22, r20
     36a:	62 27       	eor	r22, r18
     36c:	62 bb       	out	0x12, r22	; 18
     36e:	08 95       	ret

00000370 <DIO_u8ReadPin>:


uint8 DIO_u8ReadPin (uint8 Copy_u8Port , uint8 Copy_u8Pin)
{
	uint8 return_value;
	switch (Copy_u8Port)
     370:	84 34       	cpi	r24, 0x44	; 68
     372:	b1 f1       	breq	.+108    	; 0x3e0 <DIO_u8ReadPin+0x70>
     374:	85 34       	cpi	r24, 0x45	; 69
     376:	38 f4       	brcc	.+14     	; 0x386 <DIO_u8ReadPin+0x16>
     378:	82 34       	cpi	r24, 0x42	; 66
     37a:	e1 f0       	breq	.+56     	; 0x3b4 <DIO_u8ReadPin+0x44>
     37c:	83 34       	cpi	r24, 0x43	; 67
     37e:	28 f5       	brcc	.+74     	; 0x3ca <DIO_u8ReadPin+0x5a>
     380:	81 34       	cpi	r24, 0x41	; 65
     382:	c1 f5       	brne	.+112    	; 0x3f4 <DIO_u8ReadPin+0x84>
     384:	0c c0       	rjmp	.+24     	; 0x39e <DIO_u8ReadPin+0x2e>
     386:	82 36       	cpi	r24, 0x62	; 98
     388:	a9 f0       	breq	.+42     	; 0x3b4 <DIO_u8ReadPin+0x44>
     38a:	83 36       	cpi	r24, 0x63	; 99
     38c:	18 f4       	brcc	.+6      	; 0x394 <DIO_u8ReadPin+0x24>
     38e:	81 36       	cpi	r24, 0x61	; 97
     390:	89 f5       	brne	.+98     	; 0x3f4 <DIO_u8ReadPin+0x84>
     392:	05 c0       	rjmp	.+10     	; 0x39e <DIO_u8ReadPin+0x2e>
     394:	83 36       	cpi	r24, 0x63	; 99
     396:	c9 f0       	breq	.+50     	; 0x3ca <DIO_u8ReadPin+0x5a>
     398:	84 36       	cpi	r24, 0x64	; 100
     39a:	61 f5       	brne	.+88     	; 0x3f4 <DIO_u8ReadPin+0x84>
     39c:	21 c0       	rjmp	.+66     	; 0x3e0 <DIO_u8ReadPin+0x70>
	{
		case 'A':
		case 'a':
		return_value = READ_BIT(PINA , Copy_u8Pin);
     39e:	29 b3       	in	r18, 0x19	; 25
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	c9 01       	movw	r24, r18
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_u8ReadPin+0x3a>
     3a6:	95 95       	asr	r25
     3a8:	87 95       	ror	r24
     3aa:	6a 95       	dec	r22
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_u8ReadPin+0x36>
     3ae:	98 2f       	mov	r25, r24
     3b0:	91 70       	andi	r25, 0x01	; 1
		break;
     3b2:	20 c0       	rjmp	.+64     	; 0x3f4 <DIO_u8ReadPin+0x84>
		
		case 'B':
		case 'b':
		return_value = READ_BIT(PINB , Copy_u8Pin);
     3b4:	26 b3       	in	r18, 0x16	; 22
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	c9 01       	movw	r24, r18
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_u8ReadPin+0x50>
     3bc:	95 95       	asr	r25
     3be:	87 95       	ror	r24
     3c0:	6a 95       	dec	r22
     3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_u8ReadPin+0x4c>
     3c4:	98 2f       	mov	r25, r24
     3c6:	91 70       	andi	r25, 0x01	; 1
		break;
     3c8:	15 c0       	rjmp	.+42     	; 0x3f4 <DIO_u8ReadPin+0x84>
		
		case 'C':
		case 'c':
		return_value = READ_BIT(PINC , Copy_u8Pin);
     3ca:	23 b3       	in	r18, 0x13	; 19
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	c9 01       	movw	r24, r18
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_u8ReadPin+0x66>
     3d2:	95 95       	asr	r25
     3d4:	87 95       	ror	r24
     3d6:	6a 95       	dec	r22
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_u8ReadPin+0x62>
     3da:	98 2f       	mov	r25, r24
     3dc:	91 70       	andi	r25, 0x01	; 1
		break;
     3de:	0a c0       	rjmp	.+20     	; 0x3f4 <DIO_u8ReadPin+0x84>
		
		case 'D':
		case 'd':
		return_value = READ_BIT(PIND , Copy_u8Pin);
     3e0:	20 b3       	in	r18, 0x10	; 16
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	c9 01       	movw	r24, r18
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_u8ReadPin+0x7c>
     3e8:	95 95       	asr	r25
     3ea:	87 95       	ror	r24
     3ec:	6a 95       	dec	r22
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_u8ReadPin+0x78>
     3f0:	98 2f       	mov	r25, r24
     3f2:	91 70       	andi	r25, 0x01	; 1
		break;
	}
	return return_value;
}
     3f4:	89 2f       	mov	r24, r25
     3f6:	08 95       	ret

000003f8 <DIO_vSetPortDir>:



void DIO_vSetPortDir (uint8 Copy_u8Port , uint8 Copy_u8Dir)
{
	switch(Copy_u8Port)
     3f8:	84 34       	cpi	r24, 0x44	; 68
     3fa:	d9 f0       	breq	.+54     	; 0x432 <DIO_vSetPortDir+0x3a>
     3fc:	85 34       	cpi	r24, 0x45	; 69
     3fe:	38 f4       	brcc	.+14     	; 0x40e <DIO_vSetPortDir+0x16>
     400:	82 34       	cpi	r24, 0x42	; 66
     402:	99 f0       	breq	.+38     	; 0x42a <DIO_vSetPortDir+0x32>
     404:	83 34       	cpi	r24, 0x43	; 67
     406:	98 f4       	brcc	.+38     	; 0x42e <DIO_vSetPortDir+0x36>
     408:	81 34       	cpi	r24, 0x41	; 65
     40a:	a1 f4       	brne	.+40     	; 0x434 <DIO_vSetPortDir+0x3c>
     40c:	0c c0       	rjmp	.+24     	; 0x426 <DIO_vSetPortDir+0x2e>
     40e:	82 36       	cpi	r24, 0x62	; 98
     410:	61 f0       	breq	.+24     	; 0x42a <DIO_vSetPortDir+0x32>
     412:	83 36       	cpi	r24, 0x63	; 99
     414:	18 f4       	brcc	.+6      	; 0x41c <DIO_vSetPortDir+0x24>
     416:	81 36       	cpi	r24, 0x61	; 97
     418:	69 f4       	brne	.+26     	; 0x434 <DIO_vSetPortDir+0x3c>
     41a:	05 c0       	rjmp	.+10     	; 0x426 <DIO_vSetPortDir+0x2e>
     41c:	83 36       	cpi	r24, 0x63	; 99
     41e:	39 f0       	breq	.+14     	; 0x42e <DIO_vSetPortDir+0x36>
     420:	84 36       	cpi	r24, 0x64	; 100
     422:	41 f4       	brne	.+16     	; 0x434 <DIO_vSetPortDir+0x3c>
     424:	06 c0       	rjmp	.+12     	; 0x432 <DIO_vSetPortDir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA = Copy_u8Dir;
     426:	6a bb       	out	0x1a, r22	; 26
		break;
     428:	08 95       	ret
		
		case 'B':
		case 'b':
		DDRB = Copy_u8Dir;
     42a:	67 bb       	out	0x17, r22	; 23
		break;
     42c:	08 95       	ret
		
		case 'C':
		case 'c':
		DDRC = Copy_u8Dir;
     42e:	64 bb       	out	0x14, r22	; 20
		break;
     430:	08 95       	ret
		
		case 'D':
		case 'd':
		DDRD = Copy_u8Dir;
     432:	61 bb       	out	0x11, r22	; 17
     434:	08 95       	ret

00000436 <DIO_vWritePort>:
}


void DIO_vWritePort (uint8 Copy_u8Port , uint8 Copy_u8Value)
{
	switch(Copy_u8Port)
     436:	84 34       	cpi	r24, 0x44	; 68
     438:	d9 f0       	breq	.+54     	; 0x470 <DIO_vWritePort+0x3a>
     43a:	85 34       	cpi	r24, 0x45	; 69
     43c:	38 f4       	brcc	.+14     	; 0x44c <DIO_vWritePort+0x16>
     43e:	82 34       	cpi	r24, 0x42	; 66
     440:	99 f0       	breq	.+38     	; 0x468 <DIO_vWritePort+0x32>
     442:	83 34       	cpi	r24, 0x43	; 67
     444:	98 f4       	brcc	.+38     	; 0x46c <DIO_vWritePort+0x36>
     446:	81 34       	cpi	r24, 0x41	; 65
     448:	a1 f4       	brne	.+40     	; 0x472 <DIO_vWritePort+0x3c>
     44a:	0c c0       	rjmp	.+24     	; 0x464 <DIO_vWritePort+0x2e>
     44c:	82 36       	cpi	r24, 0x62	; 98
     44e:	61 f0       	breq	.+24     	; 0x468 <DIO_vWritePort+0x32>
     450:	83 36       	cpi	r24, 0x63	; 99
     452:	18 f4       	brcc	.+6      	; 0x45a <DIO_vWritePort+0x24>
     454:	81 36       	cpi	r24, 0x61	; 97
     456:	69 f4       	brne	.+26     	; 0x472 <DIO_vWritePort+0x3c>
     458:	05 c0       	rjmp	.+10     	; 0x464 <DIO_vWritePort+0x2e>
     45a:	83 36       	cpi	r24, 0x63	; 99
     45c:	39 f0       	breq	.+14     	; 0x46c <DIO_vWritePort+0x36>
     45e:	84 36       	cpi	r24, 0x64	; 100
     460:	41 f4       	brne	.+16     	; 0x472 <DIO_vWritePort+0x3c>
     462:	06 c0       	rjmp	.+12     	; 0x470 <DIO_vWritePort+0x3a>
	{
		case 'A':
		case 'a':
		PORTA = Copy_u8Value;
     464:	6b bb       	out	0x1b, r22	; 27
		break;
     466:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB = Copy_u8Value;
     468:	68 bb       	out	0x18, r22	; 24
		break;
     46a:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC = Copy_u8Value;
     46c:	65 bb       	out	0x15, r22	; 21
		break;
     46e:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD = Copy_u8Value;
     470:	62 bb       	out	0x12, r22	; 18
     472:	08 95       	ret

00000474 <DIO_vTogglePort>:
}


void DIO_vTogglePort (uint8 Copy_u8Port)
{
	switch(Copy_u8Port)
     474:	84 34       	cpi	r24, 0x44	; 68
     476:	09 f1       	breq	.+66     	; 0x4ba <DIO_vTogglePort+0x46>
     478:	85 34       	cpi	r24, 0x45	; 69
     47a:	38 f4       	brcc	.+14     	; 0x48a <DIO_vTogglePort+0x16>
     47c:	82 34       	cpi	r24, 0x42	; 66
     47e:	a9 f0       	breq	.+42     	; 0x4aa <DIO_vTogglePort+0x36>
     480:	83 34       	cpi	r24, 0x43	; 67
     482:	b8 f4       	brcc	.+46     	; 0x4b2 <DIO_vTogglePort+0x3e>
     484:	81 34       	cpi	r24, 0x41	; 65
     486:	e1 f4       	brne	.+56     	; 0x4c0 <DIO_vTogglePort+0x4c>
     488:	0c c0       	rjmp	.+24     	; 0x4a2 <DIO_vTogglePort+0x2e>
     48a:	82 36       	cpi	r24, 0x62	; 98
     48c:	71 f0       	breq	.+28     	; 0x4aa <DIO_vTogglePort+0x36>
     48e:	83 36       	cpi	r24, 0x63	; 99
     490:	18 f4       	brcc	.+6      	; 0x498 <DIO_vTogglePort+0x24>
     492:	81 36       	cpi	r24, 0x61	; 97
     494:	a9 f4       	brne	.+42     	; 0x4c0 <DIO_vTogglePort+0x4c>
     496:	05 c0       	rjmp	.+10     	; 0x4a2 <DIO_vTogglePort+0x2e>
     498:	83 36       	cpi	r24, 0x63	; 99
     49a:	59 f0       	breq	.+22     	; 0x4b2 <DIO_vTogglePort+0x3e>
     49c:	84 36       	cpi	r24, 0x64	; 100
     49e:	81 f4       	brne	.+32     	; 0x4c0 <DIO_vTogglePort+0x4c>
     4a0:	0c c0       	rjmp	.+24     	; 0x4ba <DIO_vTogglePort+0x46>
	{
		case 'A':
		case 'a':
		PORTA =~PORTA;
     4a2:	8b b3       	in	r24, 0x1b	; 27
     4a4:	80 95       	com	r24
     4a6:	8b bb       	out	0x1b, r24	; 27
		break;
     4a8:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB =~PORTB;
     4aa:	88 b3       	in	r24, 0x18	; 24
     4ac:	80 95       	com	r24
     4ae:	88 bb       	out	0x18, r24	; 24
		break;
     4b0:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC =~PORTC;
     4b2:	85 b3       	in	r24, 0x15	; 21
     4b4:	80 95       	com	r24
     4b6:	85 bb       	out	0x15, r24	; 21
		break;
     4b8:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD =~PORTD;
     4ba:	82 b3       	in	r24, 0x12	; 18
     4bc:	80 95       	com	r24
     4be:	82 bb       	out	0x12, r24	; 18
     4c0:	08 95       	ret

000004c2 <DIO_u8ReadPort>:


uint8 DIO_u8ReadPort(uint8 Copy_u8Port)
{
	uint8 return_value;
	switch (Copy_u8Port)
     4c2:	84 34       	cpi	r24, 0x44	; 68
     4c4:	d9 f0       	breq	.+54     	; 0x4fc <DIO_u8ReadPort+0x3a>
     4c6:	85 34       	cpi	r24, 0x45	; 69
     4c8:	38 f4       	brcc	.+14     	; 0x4d8 <DIO_u8ReadPort+0x16>
     4ca:	82 34       	cpi	r24, 0x42	; 66
     4cc:	99 f0       	breq	.+38     	; 0x4f4 <DIO_u8ReadPort+0x32>
     4ce:	83 34       	cpi	r24, 0x43	; 67
     4d0:	98 f4       	brcc	.+38     	; 0x4f8 <DIO_u8ReadPort+0x36>
     4d2:	81 34       	cpi	r24, 0x41	; 65
     4d4:	a1 f4       	brne	.+40     	; 0x4fe <DIO_u8ReadPort+0x3c>
     4d6:	0c c0       	rjmp	.+24     	; 0x4f0 <DIO_u8ReadPort+0x2e>
     4d8:	82 36       	cpi	r24, 0x62	; 98
     4da:	61 f0       	breq	.+24     	; 0x4f4 <DIO_u8ReadPort+0x32>
     4dc:	83 36       	cpi	r24, 0x63	; 99
     4de:	18 f4       	brcc	.+6      	; 0x4e6 <DIO_u8ReadPort+0x24>
     4e0:	81 36       	cpi	r24, 0x61	; 97
     4e2:	69 f4       	brne	.+26     	; 0x4fe <DIO_u8ReadPort+0x3c>
     4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <DIO_u8ReadPort+0x2e>
     4e6:	83 36       	cpi	r24, 0x63	; 99
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <DIO_u8ReadPort+0x36>
     4ea:	84 36       	cpi	r24, 0x64	; 100
     4ec:	41 f4       	brne	.+16     	; 0x4fe <DIO_u8ReadPort+0x3c>
     4ee:	06 c0       	rjmp	.+12     	; 0x4fc <DIO_u8ReadPort+0x3a>
	{
		case 'A':
		case 'a':
		return_value = PINA;
     4f0:	99 b3       	in	r25, 0x19	; 25
		break;
     4f2:	05 c0       	rjmp	.+10     	; 0x4fe <DIO_u8ReadPort+0x3c>
		
		case 'B':
		case 'b':
		return_value = PINB;
     4f4:	96 b3       	in	r25, 0x16	; 22
		break;
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <DIO_u8ReadPort+0x3c>
		
		case 'C':
		case 'c':
		return_value = PINC;
     4f8:	93 b3       	in	r25, 0x13	; 19
		break;
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <DIO_u8ReadPort+0x3c>
		
		case 'D':
		case 'd':
		return_value = PIND;
     4fc:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return return_value;
}
     4fe:	89 2f       	mov	r24, r25
     500:	08 95       	ret

00000502 <DIO_vConnectPullUp>:


void DIO_vConnectPullUp (uint8 Copy_u8Port , uint8 Copy_u8Pin , uint8 Copy_u8PullUpCheck)
{
	switch(Copy_u8Port)
     502:	84 34       	cpi	r24, 0x44	; 68
     504:	09 f4       	brne	.+2      	; 0x508 <DIO_vConnectPullUp+0x6>
     506:	71 c0       	rjmp	.+226    	; 0x5ea <DIO_vConnectPullUp+0xe8>
     508:	85 34       	cpi	r24, 0x45	; 69
     50a:	48 f4       	brcc	.+18     	; 0x51e <DIO_vConnectPullUp+0x1c>
     50c:	82 34       	cpi	r24, 0x42	; 66
     50e:	99 f1       	breq	.+102    	; 0x576 <DIO_vConnectPullUp+0x74>
     510:	83 34       	cpi	r24, 0x43	; 67
     512:	08 f0       	brcs	.+2      	; 0x516 <DIO_vConnectPullUp+0x14>
     514:	4d c0       	rjmp	.+154    	; 0x5b0 <DIO_vConnectPullUp+0xae>
     516:	81 34       	cpi	r24, 0x41	; 65
     518:	09 f0       	breq	.+2      	; 0x51c <DIO_vConnectPullUp+0x1a>
     51a:	83 c0       	rjmp	.+262    	; 0x622 <DIO_vConnectPullUp+0x120>
     51c:	0f c0       	rjmp	.+30     	; 0x53c <DIO_vConnectPullUp+0x3a>
     51e:	82 36       	cpi	r24, 0x62	; 98
     520:	51 f1       	breq	.+84     	; 0x576 <DIO_vConnectPullUp+0x74>
     522:	83 36       	cpi	r24, 0x63	; 99
     524:	20 f4       	brcc	.+8      	; 0x52e <DIO_vConnectPullUp+0x2c>
     526:	81 36       	cpi	r24, 0x61	; 97
     528:	09 f0       	breq	.+2      	; 0x52c <DIO_vConnectPullUp+0x2a>
     52a:	7b c0       	rjmp	.+246    	; 0x622 <DIO_vConnectPullUp+0x120>
     52c:	07 c0       	rjmp	.+14     	; 0x53c <DIO_vConnectPullUp+0x3a>
     52e:	83 36       	cpi	r24, 0x63	; 99
     530:	09 f4       	brne	.+2      	; 0x534 <DIO_vConnectPullUp+0x32>
     532:	3e c0       	rjmp	.+124    	; 0x5b0 <DIO_vConnectPullUp+0xae>
     534:	84 36       	cpi	r24, 0x64	; 100
     536:	09 f0       	breq	.+2      	; 0x53a <DIO_vConnectPullUp+0x38>
     538:	74 c0       	rjmp	.+232    	; 0x622 <DIO_vConnectPullUp+0x120>
     53a:	57 c0       	rjmp	.+174    	; 0x5ea <DIO_vConnectPullUp+0xe8>
	{
		case 'A':
		case 'a':  //Port A
		if (Copy_u8PullUpCheck == 1)	//Pull Up is enabled
     53c:	41 30       	cpi	r20, 0x01	; 1
     53e:	69 f4       	brne	.+26     	; 0x55a <DIO_vConnectPullUp+0x58>
		{
			SET_BIT(PORTA , Copy_u8Pin);
     540:	2b b3       	in	r18, 0x1b	; 27
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	ac 01       	movw	r20, r24
     548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_vConnectPullUp+0x4c>
     54a:	44 0f       	add	r20, r20
     54c:	55 1f       	adc	r21, r21
     54e:	6a 95       	dec	r22
     550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_vConnectPullUp+0x48>
     552:	ba 01       	movw	r22, r20
     554:	62 2b       	or	r22, r18
     556:	6b bb       	out	0x1b, r22	; 27
     558:	08 95       	ret
		}
		else							//Pull Up is disabled
		{
			CLR_BIT(PORTA , Copy_u8Pin);
     55a:	2b b3       	in	r18, 0x1b	; 27
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	ac 01       	movw	r20, r24
     562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_vConnectPullUp+0x66>
     564:	44 0f       	add	r20, r20
     566:	55 1f       	adc	r21, r21
     568:	6a 95       	dec	r22
     56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_vConnectPullUp+0x62>
     56c:	ba 01       	movw	r22, r20
     56e:	60 95       	com	r22
     570:	62 23       	and	r22, r18
     572:	6b bb       	out	0x1b, r22	; 27
     574:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b': //Port B
		if (Copy_u8PullUpCheck == 1)
     576:	41 30       	cpi	r20, 0x01	; 1
     578:	69 f4       	brne	.+26     	; 0x594 <DIO_vConnectPullUp+0x92>
		{
			SET_BIT(PORTB , Copy_u8Pin);
     57a:	28 b3       	in	r18, 0x18	; 24
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	ac 01       	movw	r20, r24
     582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_vConnectPullUp+0x86>
     584:	44 0f       	add	r20, r20
     586:	55 1f       	adc	r21, r21
     588:	6a 95       	dec	r22
     58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_vConnectPullUp+0x82>
     58c:	ba 01       	movw	r22, r20
     58e:	62 2b       	or	r22, r18
     590:	68 bb       	out	0x18, r22	; 24
     592:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB , Copy_u8Pin);
     594:	28 b3       	in	r18, 0x18	; 24
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	ac 01       	movw	r20, r24
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_vConnectPullUp+0xa0>
     59e:	44 0f       	add	r20, r20
     5a0:	55 1f       	adc	r21, r21
     5a2:	6a 95       	dec	r22
     5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_vConnectPullUp+0x9c>
     5a6:	ba 01       	movw	r22, r20
     5a8:	60 95       	com	r22
     5aa:	62 23       	and	r22, r18
     5ac:	68 bb       	out	0x18, r22	; 24
     5ae:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':  //Port C
		if (Copy_u8PullUpCheck == 1)
     5b0:	41 30       	cpi	r20, 0x01	; 1
     5b2:	69 f4       	brne	.+26     	; 0x5ce <DIO_vConnectPullUp+0xcc>
		{
			SET_BIT(PORTC , Copy_u8Pin);
     5b4:	25 b3       	in	r18, 0x15	; 21
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	ac 01       	movw	r20, r24
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_vConnectPullUp+0xc0>
     5be:	44 0f       	add	r20, r20
     5c0:	55 1f       	adc	r21, r21
     5c2:	6a 95       	dec	r22
     5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_vConnectPullUp+0xbc>
     5c6:	ba 01       	movw	r22, r20
     5c8:	62 2b       	or	r22, r18
     5ca:	65 bb       	out	0x15, r22	; 21
     5cc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC , Copy_u8Pin);
     5ce:	25 b3       	in	r18, 0x15	; 21
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	ac 01       	movw	r20, r24
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_vConnectPullUp+0xda>
     5d8:	44 0f       	add	r20, r20
     5da:	55 1f       	adc	r21, r21
     5dc:	6a 95       	dec	r22
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_vConnectPullUp+0xd6>
     5e0:	ba 01       	movw	r22, r20
     5e2:	60 95       	com	r22
     5e4:	62 23       	and	r22, r18
     5e6:	65 bb       	out	0x15, r22	; 21
     5e8:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':  //Port D
		if (Copy_u8PullUpCheck == 1)
     5ea:	41 30       	cpi	r20, 0x01	; 1
     5ec:	69 f4       	brne	.+26     	; 0x608 <DIO_vConnectPullUp+0x106>
		{
			SET_BIT(PORTD , Copy_u8Pin);
     5ee:	22 b3       	in	r18, 0x12	; 18
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	ac 01       	movw	r20, r24
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_vConnectPullUp+0xfa>
     5f8:	44 0f       	add	r20, r20
     5fa:	55 1f       	adc	r21, r21
     5fc:	6a 95       	dec	r22
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_vConnectPullUp+0xf6>
     600:	ba 01       	movw	r22, r20
     602:	62 2b       	or	r22, r18
     604:	62 bb       	out	0x12, r22	; 18
     606:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD , Copy_u8Pin);
     608:	22 b3       	in	r18, 0x12	; 18
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	ac 01       	movw	r20, r24
     610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_vConnectPullUp+0x114>
     612:	44 0f       	add	r20, r20
     614:	55 1f       	adc	r21, r21
     616:	6a 95       	dec	r22
     618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_vConnectPullUp+0x110>
     61a:	ba 01       	movw	r22, r20
     61c:	60 95       	com	r22
     61e:	62 23       	and	r22, r18
     620:	62 bb       	out	0x12, r22	; 18
     622:	08 95       	ret

00000624 <EEPROM_vWrite>:
#include "EEPROM_interface.h"

void EEPROM_vWrite(uint16 Copy_u16Address , uint8 Copy_u8Data)
{
	/* set up address register*/
	EEAR = Copy_u16Address;
     624:	9f bb       	out	0x1f, r25	; 31
     626:	8e bb       	out	0x1e, r24	; 30
	/* set up data register*/
	EEDR = Copy_u8Data;
     628:	6d bb       	out	0x1d, r22	; 29
	/*setting EEMWE*/
	SET_BIT(EECR,EEMWE);
     62a:	e2 9a       	sbi	0x1c, 2	; 28
	/*start writing by setting EEWE*/
	SET_BIT(EECR,EEWE);
     62c:	e1 9a       	sbi	0x1c, 1	; 28
	/*wait till the processor finishes writing*/
	while(READ_BIT(EECR,EEWE)==1);
     62e:	8c b3       	in	r24, 0x1c	; 28
     630:	81 fd       	sbrc	r24, 1
     632:	fd cf       	rjmp	.-6      	; 0x62e <EEPROM_vWrite+0xa>
}
     634:	08 95       	ret

00000636 <EEPROM_vREAD>:


uint8 EEPROM_vREAD(uint16 Copy_u16Address)
{
	/* set up address register*/
	EEAR = Copy_u16Address;
     636:	9f bb       	out	0x1f, r25	; 31
     638:	8e bb       	out	0x1e, r24	; 30
	/* start reading by setting EERE */
	SET_BIT(EECR,EERE);
     63a:	e0 9a       	sbi	0x1c, 0	; 28
	/*wait till the processor finishes reading */
	while(READ_BIT(EECR,EERE)==1);
     63c:	e0 99       	sbic	0x1c, 0	; 28
     63e:	fe cf       	rjmp	.-4      	; 0x63c <EEPROM_vREAD+0x6>
	/*return the data in the data register*/
	return EEDR;
     640:	8d b3       	in	r24, 0x1d	; 29
     642:	08 95       	ret

00000644 <GIE_EnableInterrupt>:
#include "GIE_private.h"
#include "GIE_interface.h"

void GIE_EnableInterrupt (void)
{
	SET_BIT(SREG,Ibit); // set Ibit(bit 7) of Status register
     644:	8f b7       	in	r24, 0x3f	; 63
     646:	80 68       	ori	r24, 0x80	; 128
     648:	8f bf       	out	0x3f, r24	; 63
}
     64a:	08 95       	ret

0000064c <GIE_DisableInterrupt>:

void GIE_DisableInterrupt (void)
{
	CLR_BIT(SREG,Ibit); // clear Ibit(bit 7) of Status register
     64c:	8f b7       	in	r24, 0x3f	; 63
     64e:	8f 77       	andi	r24, 0x7F	; 127
     650:	8f bf       	out	0x3f, r24	; 63
     652:	08 95       	ret

00000654 <KYP_vInit>:
#include "KYP_interface.h"

void KYP_vInit(void)
{
	DIO_vSetPortDir(KYP_PORT,0x0F);//first 4 pins are output and last 4 pins are input
     654:	83 e4       	ldi	r24, 0x43	; 67
     656:	6f e0       	ldi	r22, 0x0F	; 15
     658:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_vSetPortDir>
	/* connect pull up */
	DIO_vConnectPullUp(KYP_PORT,KYP_COL1_PIN,1);
     65c:	83 e4       	ldi	r24, 0x43	; 67
     65e:	64 e0       	ldi	r22, 0x04	; 4
     660:	41 e0       	ldi	r20, 0x01	; 1
     662:	0e 94 81 02 	call	0x502	; 0x502 <DIO_vConnectPullUp>
	DIO_vConnectPullUp(KYP_PORT,KYP_COL2_PIN,1);
     666:	83 e4       	ldi	r24, 0x43	; 67
     668:	65 e0       	ldi	r22, 0x05	; 5
     66a:	41 e0       	ldi	r20, 0x01	; 1
     66c:	0e 94 81 02 	call	0x502	; 0x502 <DIO_vConnectPullUp>
	DIO_vConnectPullUp(KYP_PORT,KYP_COL3_PIN,1);
     670:	83 e4       	ldi	r24, 0x43	; 67
     672:	66 e0       	ldi	r22, 0x06	; 6
     674:	41 e0       	ldi	r20, 0x01	; 1
     676:	0e 94 81 02 	call	0x502	; 0x502 <DIO_vConnectPullUp>
	DIO_vConnectPullUp(KYP_PORT,KYP_COL4_PIN,1);
     67a:	83 e4       	ldi	r24, 0x43	; 67
     67c:	67 e0       	ldi	r22, 0x07	; 7
     67e:	41 e0       	ldi	r20, 0x01	; 1
     680:	0e 94 81 02 	call	0x502	; 0x502 <DIO_vConnectPullUp>
	/* Initialize rows with 1 */
	DIO_vWritePin(KYP_PORT,KYP_ROW1_PIN,HIGH);
     684:	83 e4       	ldi	r24, 0x43	; 67
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	41 e0       	ldi	r20, 0x01	; 1
     68a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(KYP_PORT,KYP_ROW2_PIN,HIGH);
     68e:	83 e4       	ldi	r24, 0x43	; 67
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	41 e0       	ldi	r20, 0x01	; 1
     694:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(KYP_PORT,KYP_ROW3_PIN,HIGH);
     698:	83 e4       	ldi	r24, 0x43	; 67
     69a:	62 e0       	ldi	r22, 0x02	; 2
     69c:	41 e0       	ldi	r20, 0x01	; 1
     69e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(KYP_PORT,KYP_ROW4_PIN,HIGH);
     6a2:	83 e4       	ldi	r24, 0x43	; 67
     6a4:	63 e0       	ldi	r22, 0x03	; 3
     6a6:	41 e0       	ldi	r20, 0x01	; 1
     6a8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
}
     6ac:	08 95       	ret

000006ae <KYP_u8CheckPress>:

uint8 KYP_u8CheckPress(void)
{
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	60 97       	sbiw	r28, 0x10	; 16
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
	//local array for the ascii values of keypad
	uint8 LOC_KYP_ARR[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     6c6:	de 01       	movw	r26, r28
     6c8:	11 96       	adiw	r26, 0x01	; 1
     6ca:	e0 e6       	ldi	r30, 0x60	; 96
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	80 e1       	ldi	r24, 0x10	; 16
     6d0:	01 90       	ld	r0, Z+
     6d2:	0d 92       	st	X+, r0
     6d4:	81 50       	subi	r24, 0x01	; 1
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <KYP_u8CheckPress+0x22>
	uint8 LOC_row , LOC_col; // counters for the loops
	uint8 LOC_ReadX = 1;
	uint8 Return_Value = NOT_PRESSED; //value to be returned
	for(LOC_row = 0 ; LOC_row < 4 ; LOC_row++)
     6d8:	00 e0       	ldi	r16, 0x00	; 0
	{
		DIO_vWritePin(KYP_PORT,LOC_row,LOW);
     6da:	83 e4       	ldi	r24, 0x43	; 67
     6dc:	60 2f       	mov	r22, r16
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
		for(LOC_col=0 ; LOC_col<4 ; LOC_col++)
     6e4:	10 e0       	ldi	r17, 0x00	; 0
		{
			LOC_ReadX = DIO_u8ReadPin(KYP_PORT,LOC_col+4);//read the switch , col+4 as the first pin starts from 4
     6e6:	61 2f       	mov	r22, r17
     6e8:	6c 5f       	subi	r22, 0xFC	; 252
     6ea:	83 e4       	ldi	r24, 0x43	; 67
     6ec:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_u8ReadPin>
			if(LOC_ReadX == 0)
     6f0:	88 23       	and	r24, r24
     6f2:	89 f4       	brne	.+34     	; 0x716 <KYP_u8CheckPress+0x68>
			{
				Return_Value = LOC_KYP_ARR[LOC_row][LOC_col];
     6f4:	e0 2f       	mov	r30, r16
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	ee 0f       	add	r30, r30
     6fe:	ff 1f       	adc	r31, r31
     700:	e1 0f       	add	r30, r17
     702:	f1 1d       	adc	r31, r1
     704:	ec 0f       	add	r30, r28
     706:	fd 1f       	adc	r31, r29
     708:	11 81       	ldd	r17, Z+1	; 0x01
				break;
			}
		}
		//return the pin to default 1
		DIO_vWritePin(KYP_PORT,LOC_row,HIGH);
     70a:	83 e4       	ldi	r24, 0x43	; 67
     70c:	60 2f       	mov	r22, r16
     70e:	41 e0       	ldi	r20, 0x01	; 1
     710:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
     714:	04 c0       	rjmp	.+8      	; 0x71e <KYP_u8CheckPress+0x70>
	uint8 LOC_ReadX = 1;
	uint8 Return_Value = NOT_PRESSED; //value to be returned
	for(LOC_row = 0 ; LOC_row < 4 ; LOC_row++)
	{
		DIO_vWritePin(KYP_PORT,LOC_row,LOW);
		for(LOC_col=0 ; LOC_col<4 ; LOC_col++)
     716:	1f 5f       	subi	r17, 0xFF	; 255
     718:	14 30       	cpi	r17, 0x04	; 4
     71a:	29 f7       	brne	.-54     	; 0x6e6 <KYP_u8CheckPress+0x38>
     71c:	0c c0       	rjmp	.+24     	; 0x736 <KYP_u8CheckPress+0x88>
		{
			break;
		}	
	}
	return Return_Value;
     71e:	81 2f       	mov	r24, r17
     720:	60 96       	adiw	r28, 0x10	; 16
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	08 95       	ret
				Return_Value = LOC_KYP_ARR[LOC_row][LOC_col];
				break;
			}
		}
		//return the pin to default 1
		DIO_vWritePin(KYP_PORT,LOC_row,HIGH);
     736:	83 e4       	ldi	r24, 0x43	; 67
     738:	60 2f       	mov	r22, r16
     73a:	41 e0       	ldi	r20, 0x01	; 1
     73c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	//local array for the ascii values of keypad
	uint8 LOC_KYP_ARR[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	uint8 LOC_row , LOC_col; // counters for the loops
	uint8 LOC_ReadX = 1;
	uint8 Return_Value = NOT_PRESSED; //value to be returned
	for(LOC_row = 0 ; LOC_row < 4 ; LOC_row++)
     740:	0f 5f       	subi	r16, 0xFF	; 255
     742:	04 30       	cpi	r16, 0x04	; 4
     744:	51 f6       	brne	.-108    	; 0x6da <KYP_u8CheckPress+0x2c>
     746:	1f ef       	ldi	r17, 0xFF	; 255
     748:	ea cf       	rjmp	.-44     	; 0x71e <KYP_u8CheckPress+0x70>

0000074a <LCD_vEnable>:
}

/*****************************************************************************************************************************/
static void LCD_vEnable(void)
{
	DIO_vWritePin(LCD_PORT_CONTROL,EN,HIGH);
     74a:	81 e4       	ldi	r24, 0x41	; 65
     74c:	66 e0       	ldi	r22, 0x06	; 6
     74e:	41 e0       	ldi	r20, 0x01	; 1
     750:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     754:	8f e9       	ldi	r24, 0x9F	; 159
     756:	9f e0       	ldi	r25, 0x0F	; 15
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	f1 f7       	brne	.-4      	; 0x758 <LCD_vEnable+0xe>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <LCD_vEnable+0x14>
     75e:	00 00       	nop
	_delay_ms(2);
	DIO_vWritePin(LCD_PORT_CONTROL,EN,LOW);
     760:	81 e4       	ldi	r24, 0x41	; 65
     762:	66 e0       	ldi	r22, 0x06	; 6
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
     76a:	8f e9       	ldi	r24, 0x9F	; 159
     76c:	9f e0       	ldi	r25, 0x0F	; 15
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	f1 f7       	brne	.-4      	; 0x76e <LCD_vEnable+0x24>
     772:	00 c0       	rjmp	.+0      	; 0x774 <LCD_vEnable+0x2a>
     774:	00 00       	nop
	_delay_ms(2);
}
     776:	08 95       	ret

00000778 <LCD_vSendCmd>:
	#endif
}

/*****************************************************************************************************************************/
void LCD_vSendCmd(uint8 Copy_u8Command)
{
     778:	cf 93       	push	r28
     77a:	c8 2f       	mov	r28, r24
	DIO_vWritePort(LCD_PORT_DATA,Copy_u8Command); //send the command to the LCD through the MCU pins
	DIO_vWritePin(LCD_PORT_CONTROL,RS,LOW);       //choose to write a command (RS = 0)
	LCD_vEnable(); //send the enable pulse
	#elif defined FOUR_BIT_MODE
	//send the higher bits to the LCD four pins
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN   , READ_BIT(Copy_u8Command,4));
     77c:	48 2f       	mov	r20, r24
     77e:	42 95       	swap	r20
     780:	4f 70       	andi	r20, 0x0F	; 15
     782:	41 70       	andi	r20, 0x01	; 1
     784:	81 e4       	ldi	r24, 0x41	; 65
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+1 , READ_BIT(Copy_u8Command,5));
     78c:	4c 2f       	mov	r20, r28
     78e:	42 95       	swap	r20
     790:	46 95       	lsr	r20
     792:	47 70       	andi	r20, 0x07	; 7
     794:	41 70       	andi	r20, 0x01	; 1
     796:	81 e4       	ldi	r24, 0x41	; 65
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+2 , READ_BIT(Copy_u8Command,6));
     79e:	4c 2f       	mov	r20, r28
     7a0:	42 95       	swap	r20
     7a2:	46 95       	lsr	r20
     7a4:	46 95       	lsr	r20
     7a6:	43 70       	andi	r20, 0x03	; 3
     7a8:	41 70       	andi	r20, 0x01	; 1
     7aa:	81 e4       	ldi	r24, 0x41	; 65
     7ac:	62 e0       	ldi	r22, 0x02	; 2
     7ae:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+3 , READ_BIT(Copy_u8Command,7));
     7b2:	4c 2f       	mov	r20, r28
     7b4:	44 1f       	adc	r20, r20
     7b6:	44 27       	eor	r20, r20
     7b8:	44 1f       	adc	r20, r20
     7ba:	81 e4       	ldi	r24, 0x41	; 65
     7bc:	63 e0       	ldi	r22, 0x03	; 3
     7be:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_CONTROL,RS,LOW);       //choose to write a command (RS = 0)
     7c2:	81 e4       	ldi	r24, 0x41	; 65
     7c4:	64 e0       	ldi	r22, 0x04	; 4
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	LCD_vEnable(); //send the enable pulse
     7cc:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_vEnable>
	//send the lower bits to the LCD four pins
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN   , READ_BIT(Copy_u8Command,0));
     7d0:	4c 2f       	mov	r20, r28
     7d2:	41 70       	andi	r20, 0x01	; 1
     7d4:	81 e4       	ldi	r24, 0x41	; 65
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+1 , READ_BIT(Copy_u8Command,1));
     7dc:	4c 2f       	mov	r20, r28
     7de:	46 95       	lsr	r20
     7e0:	41 70       	andi	r20, 0x01	; 1
     7e2:	81 e4       	ldi	r24, 0x41	; 65
     7e4:	61 e0       	ldi	r22, 0x01	; 1
     7e6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+2 , READ_BIT(Copy_u8Command,2));
     7ea:	4c 2f       	mov	r20, r28
     7ec:	46 95       	lsr	r20
     7ee:	46 95       	lsr	r20
     7f0:	41 70       	andi	r20, 0x01	; 1
     7f2:	81 e4       	ldi	r24, 0x41	; 65
     7f4:	62 e0       	ldi	r22, 0x02	; 2
     7f6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+3 , READ_BIT(Copy_u8Command,3));
     7fa:	c6 95       	lsr	r28
     7fc:	c6 95       	lsr	r28
     7fe:	c6 95       	lsr	r28
     800:	4c 2f       	mov	r20, r28
     802:	41 70       	andi	r20, 0x01	; 1
     804:	81 e4       	ldi	r24, 0x41	; 65
     806:	63 e0       	ldi	r22, 0x03	; 3
     808:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_CONTROL,RS,LOW);       //choose to write a command (RS = 0)
     80c:	81 e4       	ldi	r24, 0x41	; 65
     80e:	64 e0       	ldi	r22, 0x04	; 4
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	LCD_vEnable(); //send the enable pulse
     816:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_vEnable>
	#endif
}
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <LCD_vInit>:
     81e:	8f e7       	ldi	r24, 0x7F	; 127
     820:	99 ea       	ldi	r25, 0xA9	; 169
     822:	a3 e0       	ldi	r26, 0x03	; 3
     824:	81 50       	subi	r24, 0x01	; 1
     826:	90 40       	sbci	r25, 0x00	; 0
     828:	a0 40       	sbci	r26, 0x00	; 0
     82a:	e1 f7       	brne	.-8      	; 0x824 <LCD_vInit+0x6>
     82c:	00 c0       	rjmp	.+0      	; 0x82e <LCD_vInit+0x10>
     82e:	00 00       	nop
	_delay_ms(10);
	LCD_vSendCmd(ENTRY_MODE);
	_delay_ms(1);
	#elif defined FOUR_BIT_MODE
	//set the 4 pins direction
	DIO_vSetPinDir(LCD_PORT_DATA , FOUR_BIT_START_PIN   , PIN_OUTPUT);
     830:	81 e4       	ldi	r24, 0x41	; 65
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	41 e0       	ldi	r20, 0x01	; 1
     836:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT_DATA , FOUR_BIT_START_PIN+1 , PIN_OUTPUT);
     83a:	81 e4       	ldi	r24, 0x41	; 65
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	41 e0       	ldi	r20, 0x01	; 1
     840:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT_DATA , FOUR_BIT_START_PIN+2 , PIN_OUTPUT);
     844:	81 e4       	ldi	r24, 0x41	; 65
     846:	62 e0       	ldi	r22, 0x02	; 2
     848:	41 e0       	ldi	r20, 0x01	; 1
     84a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT_DATA , FOUR_BIT_START_PIN+3 , PIN_OUTPUT);
     84e:	81 e4       	ldi	r24, 0x41	; 65
     850:	63 e0       	ldi	r22, 0x03	; 3
     852:	41 e0       	ldi	r20, 0x01	; 1
     854:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	//set enable pins direction
	DIO_vSetPinDir(LCD_PORT_CONTROL,RS,PIN_OUTPUT);
     858:	81 e4       	ldi	r24, 0x41	; 65
     85a:	64 e0       	ldi	r22, 0x04	; 4
     85c:	41 e0       	ldi	r20, 0x01	; 1
     85e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT_CONTROL,RW,PIN_OUTPUT);
     862:	81 e4       	ldi	r24, 0x41	; 65
     864:	65 e0       	ldi	r22, 0x05	; 5
     866:	41 e0       	ldi	r20, 0x01	; 1
     868:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT_CONTROL,EN,PIN_OUTPUT);
     86c:	81 e4       	ldi	r24, 0x41	; 65
     86e:	66 e0       	ldi	r22, 0x06	; 6
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	/*set RW pin to the Write mode*/
	DIO_vWritePin(LCD_PORT_CONTROL,RW,LOW);
     876:	81 e4       	ldi	r24, 0x41	; 65
     878:	65 e0       	ldi	r22, 0x05	; 5
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	/* Sending commands to the LCD */
	LCD_vSendCmd(RETURN_HOME);
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_vSendCmd>
     886:	af e1       	ldi	r26, 0x1F	; 31
     888:	be e4       	ldi	r27, 0x4E	; 78
     88a:	11 97       	sbiw	r26, 0x01	; 1
     88c:	f1 f7       	brne	.-4      	; 0x88a <__stack+0x2b>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <__stack+0x31>
     890:	00 00       	nop
	_delay_ms(10);
	LCD_vSendCmd(FOUR_BIT);
     892:	88 e2       	ldi	r24, 0x28	; 40
     894:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_vSendCmd>
     898:	8f ec       	ldi	r24, 0xCF	; 207
     89a:	97 e0       	ldi	r25, 0x07	; 7
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <__stack+0x3d>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <__stack+0x43>
     8a2:	00 00       	nop
	_delay_ms(1);
	LCD_vSendCmd(DISPLAY_ON_CURSOR_OFF);
     8a4:	8c e0       	ldi	r24, 0x0C	; 12
     8a6:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_vSendCmd>
     8aa:	af ec       	ldi	r26, 0xCF	; 207
     8ac:	b7 e0       	ldi	r27, 0x07	; 7
     8ae:	11 97       	sbiw	r26, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <__stack+0x4f>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <__stack+0x55>
     8b4:	00 00       	nop
	_delay_ms(1);
	LCD_vSendCmd(CLR_SCREEN);
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_vSendCmd>
     8bc:	8f e1       	ldi	r24, 0x1F	; 31
     8be:	9e e4       	ldi	r25, 0x4E	; 78
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <__stack+0x61>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <__stack+0x67>
     8c6:	00 00       	nop
	_delay_ms(10);
	LCD_vSendCmd(ENTRY_MODE);
     8c8:	86 e0       	ldi	r24, 0x06	; 6
     8ca:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_vSendCmd>
     8ce:	af ec       	ldi	r26, 0xCF	; 207
     8d0:	b7 e0       	ldi	r27, 0x07	; 7
     8d2:	11 97       	sbiw	r26, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <__stack+0x73>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <__stack+0x79>
     8d8:	00 00       	nop
	_delay_ms(1);
	#endif
}
     8da:	08 95       	ret

000008dc <LCD_vSendData>:
	#endif
}

/*****************************************************************************************************************************/
void LCD_vSendData(uint8 Copy_u8Data)
{
     8dc:	cf 93       	push	r28
     8de:	c8 2f       	mov	r28, r24
	#if defined EIGHT_BIT_MODE
	DIO_vWritePort(LCD_PORT_DATA,Copy_u8Data); // send the data to the LCD through the MCU pins
	DIO_vWritePin(LCD_PORT_CONTROL,RS,HIGH);   // choose to write a data (RS = 1)
	LCD_vEnable(); // send the enable pulse
	#elif defined FOUR_BIT_MODE
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN   , READ_BIT(Copy_u8Data,4));
     8e0:	48 2f       	mov	r20, r24
     8e2:	42 95       	swap	r20
     8e4:	4f 70       	andi	r20, 0x0F	; 15
     8e6:	41 70       	andi	r20, 0x01	; 1
     8e8:	81 e4       	ldi	r24, 0x41	; 65
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+1 , READ_BIT(Copy_u8Data,5));
     8f0:	4c 2f       	mov	r20, r28
     8f2:	42 95       	swap	r20
     8f4:	46 95       	lsr	r20
     8f6:	47 70       	andi	r20, 0x07	; 7
     8f8:	41 70       	andi	r20, 0x01	; 1
     8fa:	81 e4       	ldi	r24, 0x41	; 65
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+2 , READ_BIT(Copy_u8Data,6));
     902:	4c 2f       	mov	r20, r28
     904:	42 95       	swap	r20
     906:	46 95       	lsr	r20
     908:	46 95       	lsr	r20
     90a:	43 70       	andi	r20, 0x03	; 3
     90c:	41 70       	andi	r20, 0x01	; 1
     90e:	81 e4       	ldi	r24, 0x41	; 65
     910:	62 e0       	ldi	r22, 0x02	; 2
     912:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+3 , READ_BIT(Copy_u8Data,7));
     916:	4c 2f       	mov	r20, r28
     918:	44 1f       	adc	r20, r20
     91a:	44 27       	eor	r20, r20
     91c:	44 1f       	adc	r20, r20
     91e:	81 e4       	ldi	r24, 0x41	; 65
     920:	63 e0       	ldi	r22, 0x03	; 3
     922:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_CONTROL,RS,HIGH);       // choose to write a data (RS = 1)
     926:	81 e4       	ldi	r24, 0x41	; 65
     928:	64 e0       	ldi	r22, 0x04	; 4
     92a:	41 e0       	ldi	r20, 0x01	; 1
     92c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	LCD_vEnable(); // send the enable pulse
     930:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_vEnable>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN   , READ_BIT(Copy_u8Data,0));
     934:	4c 2f       	mov	r20, r28
     936:	41 70       	andi	r20, 0x01	; 1
     938:	81 e4       	ldi	r24, 0x41	; 65
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+1 , READ_BIT(Copy_u8Data,1));
     940:	4c 2f       	mov	r20, r28
     942:	46 95       	lsr	r20
     944:	41 70       	andi	r20, 0x01	; 1
     946:	81 e4       	ldi	r24, 0x41	; 65
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+2 , READ_BIT(Copy_u8Data,2));
     94e:	4c 2f       	mov	r20, r28
     950:	46 95       	lsr	r20
     952:	46 95       	lsr	r20
     954:	41 70       	andi	r20, 0x01	; 1
     956:	81 e4       	ldi	r24, 0x41	; 65
     958:	62 e0       	ldi	r22, 0x02	; 2
     95a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_DATA , FOUR_BIT_START_PIN+3 , READ_BIT(Copy_u8Data,3));
     95e:	c6 95       	lsr	r28
     960:	c6 95       	lsr	r28
     962:	c6 95       	lsr	r28
     964:	4c 2f       	mov	r20, r28
     966:	41 70       	andi	r20, 0x01	; 1
     968:	81 e4       	ldi	r24, 0x41	; 65
     96a:	63 e0       	ldi	r22, 0x03	; 3
     96c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePin(LCD_PORT_CONTROL,RS,HIGH);       //choose to write a command (RS = 1)
     970:	81 e4       	ldi	r24, 0x41	; 65
     972:	64 e0       	ldi	r22, 0x04	; 4
     974:	41 e0       	ldi	r20, 0x01	; 1
     976:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	LCD_vEnable(); //send the enable pulse
     97a:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_vEnable>
	#endif
}
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <LCD_vClearScreen>:
}

/*****************************************************************************************************************************/
void LCD_vClearScreen(void)
{
	LCD_vSendCmd(CLR_SCREEN);//send clear command to LCD
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_vSendCmd>
}
     988:	08 95       	ret

0000098a <LCD_vMoveCursor>:
/*****************************************************************************************************************************/
void LCD_vMoveCursor(uint8 Copy_u8Row , uint8 Copy_u8Col)
{
	uint8 LOC_Cmd;
	//check if the input parameters are out of range
	if(Copy_u8Row>2 || Copy_u8Col>16 || Copy_u8Col==0 ||Copy_u8Row==0)
     98a:	83 30       	cpi	r24, 0x03	; 3
     98c:	80 f4       	brcc	.+32     	; 0x9ae <LCD_vMoveCursor+0x24>
     98e:	61 31       	cpi	r22, 0x11	; 17
     990:	80 f4       	brcc	.+32     	; 0x9b2 <LCD_vMoveCursor+0x28>
     992:	66 23       	and	r22, r22
     994:	81 f0       	breq	.+32     	; 0x9b6 <LCD_vMoveCursor+0x2c>
     996:	88 23       	and	r24, r24
     998:	81 f0       	breq	.+32     	; 0x9ba <LCD_vMoveCursor+0x30>
	{
		LOC_Cmd = ROW1_START; // 1st row and 1st col
	}
	else if(Copy_u8Row == 1)
     99a:	81 30       	cpi	r24, 0x01	; 1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <LCD_vMoveCursor+0x1a>
	{
		LOC_Cmd = ROW1_START + Copy_u8Col - 1; //add the col offset to the row1 start command 
     99e:	96 2f       	mov	r25, r22
     9a0:	91 58       	subi	r25, 0x81	; 129
     9a2:	0c c0       	rjmp	.+24     	; 0x9bc <LCD_vMoveCursor+0x32>
	}
	else if(Copy_u8Row == 2)
     9a4:	82 30       	cpi	r24, 0x02	; 2
     9a6:	51 f4       	brne	.+20     	; 0x9bc <LCD_vMoveCursor+0x32>
	{
		LOC_Cmd = ROW2_START + Copy_u8Col - 1; //add the col offset to the row2 start command 
     9a8:	96 2f       	mov	r25, r22
     9aa:	91 54       	subi	r25, 0x41	; 65
     9ac:	07 c0       	rjmp	.+14     	; 0x9bc <LCD_vMoveCursor+0x32>
{
	uint8 LOC_Cmd;
	//check if the input parameters are out of range
	if(Copy_u8Row>2 || Copy_u8Col>16 || Copy_u8Col==0 ||Copy_u8Row==0)
	{
		LOC_Cmd = ROW1_START; // 1st row and 1st col
     9ae:	90 e8       	ldi	r25, 0x80	; 128
     9b0:	05 c0       	rjmp	.+10     	; 0x9bc <LCD_vMoveCursor+0x32>
     9b2:	90 e8       	ldi	r25, 0x80	; 128
     9b4:	03 c0       	rjmp	.+6      	; 0x9bc <LCD_vMoveCursor+0x32>
     9b6:	90 e8       	ldi	r25, 0x80	; 128
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <LCD_vMoveCursor+0x32>
     9ba:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if(Copy_u8Row == 2)
	{
		LOC_Cmd = ROW2_START + Copy_u8Col - 1; //add the col offset to the row2 start command 
	}
	LCD_vSendCmd(LOC_Cmd);
     9bc:	89 2f       	mov	r24, r25
     9be:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_vSendCmd>
}
     9c2:	08 95       	ret

000009c4 <LCD_vSendString>:

/*****************************************************************************************************************************/
void LCD_vSendString(uint8* Copy_u8Data)
{
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	ec 01       	movw	r28, r24
	//check the end of the string
	while(*Copy_u8Data != '\0')
     9ca:	88 81       	ld	r24, Y
     9cc:	88 23       	and	r24, r24
     9ce:	31 f0       	breq	.+12     	; 0x9dc <LCD_vSendString+0x18>
	}
	LCD_vSendCmd(LOC_Cmd);
}

/*****************************************************************************************************************************/
void LCD_vSendString(uint8* Copy_u8Data)
     9d0:	21 96       	adiw	r28, 0x01	; 1
{
	//check the end of the string
	while(*Copy_u8Data != '\0')
	{
		LCD_vSendData(*Copy_u8Data); //send the current character
     9d2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_vSendData>

/*****************************************************************************************************************************/
void LCD_vSendString(uint8* Copy_u8Data)
{
	//check the end of the string
	while(*Copy_u8Data != '\0')
     9d6:	89 91       	ld	r24, Y+
     9d8:	88 23       	and	r24, r24
     9da:	d9 f7       	brne	.-10     	; 0x9d2 <LCD_vSendString+0xe>
	{
		LCD_vSendData(*Copy_u8Data); //send the current character
		Copy_u8Data++;               //increment to get the next address of the next char
	}
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <LCD_vSendNumber>:
/*****************************************************************************************************************************/
void LCD_vSendNumber(uint16 Copy_u16Number)
{
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	28 97       	sbiw	r28, 0x08	; 8
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
	sint8 i=0;// counter
	uint8 LOC_arr[8];//array holding numbers
	if(Copy_u16Number/10 == 0)
     9f8:	8a 30       	cpi	r24, 0x0A	; 10
     9fa:	91 05       	cpc	r25, r1
     9fc:	18 f0       	brcs	.+6      	; 0xa04 <LCD_vSendNumber+0x22>
	{
		LCD_vSendData(Copy_u16Number+48);
	}
	else
	{
		while(Copy_u16Number != 0)
     9fe:	00 97       	sbiw	r24, 0x00	; 0
     a00:	29 f4       	brne	.+10     	; 0xa0c <LCD_vSendNumber+0x2a>
     a02:	2d c0       	rjmp	.+90     	; 0xa5e <LCD_vSendNumber+0x7c>
{
	sint8 i=0;// counter
	uint8 LOC_arr[8];//array holding numbers
	if(Copy_u16Number/10 == 0)
	{
		LCD_vSendData(Copy_u16Number+48);
     a04:	80 5d       	subi	r24, 0xD0	; 208
     a06:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_vSendData>
     a0a:	29 c0       	rjmp	.+82     	; 0xa5e <LCD_vSendNumber+0x7c>
	}
	else
	{
		while(Copy_u16Number != 0)
     a0c:	10 e0       	ldi	r17, 0x00	; 0
		{
			LOC_arr[i]=Copy_u16Number%10;
     a0e:	2a e0       	ldi	r18, 0x0A	; 10
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	e1 2f       	mov	r30, r17
     a14:	ff 27       	eor	r31, r31
     a16:	e7 fd       	sbrc	r30, 7
     a18:	f0 95       	com	r31
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	4c 0f       	add	r20, r28
     a20:	5d 1f       	adc	r21, r29
     a22:	e4 0f       	add	r30, r20
     a24:	f5 1f       	adc	r31, r21
     a26:	b9 01       	movw	r22, r18
     a28:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__udivmodhi4>
     a2c:	80 83       	st	Z, r24
			Copy_u16Number = Copy_u16Number / 10;
     a2e:	86 2f       	mov	r24, r22
     a30:	97 2f       	mov	r25, r23
			i++;
     a32:	1f 5f       	subi	r17, 0xFF	; 255
	{
		LCD_vSendData(Copy_u16Number+48);
	}
	else
	{
		while(Copy_u16Number != 0)
     a34:	00 97       	sbiw	r24, 0x00	; 0
     a36:	69 f7       	brne	.-38     	; 0xa12 <LCD_vSendNumber+0x30>
		{
			LOC_arr[i]=Copy_u16Number%10;
			Copy_u16Number = Copy_u16Number / 10;
			i++;
		}
		while(i > 0)
     a38:	11 16       	cp	r1, r17
     a3a:	8c f4       	brge	.+34     	; 0xa5e <LCD_vSendNumber+0x7c>
		{
			i--;
     a3c:	11 50       	subi	r17, 0x01	; 1
			LCD_vSendData(LOC_arr[i]+48);
     a3e:	e1 2f       	mov	r30, r17
     a40:	ff 27       	eor	r31, r31
     a42:	e7 fd       	sbrc	r30, 7
     a44:	f0 95       	com	r31
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	8c 0f       	add	r24, r28
     a4c:	9d 1f       	adc	r25, r29
     a4e:	e8 0f       	add	r30, r24
     a50:	f9 1f       	adc	r31, r25
     a52:	80 81       	ld	r24, Z
     a54:	80 5d       	subi	r24, 0xD0	; 208
     a56:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_vSendData>
		{
			LOC_arr[i]=Copy_u16Number%10;
			Copy_u16Number = Copy_u16Number / 10;
			i++;
		}
		while(i > 0)
     a5a:	11 23       	and	r17, r17
     a5c:	79 f7       	brne	.-34     	; 0xa3c <LCD_vSendNumber+0x5a>
		{
			i--;
			LCD_vSendData(LOC_arr[i]+48);
		}
	}
}
     a5e:	28 96       	adiw	r28, 0x08	; 8
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	f8 94       	cli
     a64:	de bf       	out	0x3e, r29	; 62
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	cd bf       	out	0x3d, r28	; 61
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	08 95       	ret

00000a72 <TMR0_ISR>:
uint16 TMR0_counter = 0;


void TMR0_ISR(void)
{
	TMR0_counter++;
     a72:	80 91 90 02 	lds	r24, 0x0290
     a76:	90 91 91 02 	lds	r25, 0x0291
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	90 93 91 02 	sts	0x0291, r25
     a80:	80 93 90 02 	sts	0x0290, r24
}
     a84:	08 95       	ret

00000a86 <main>:


int main(void)
{
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	2b 97       	sbiw	r28, 0x0b	; 11
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
	uint8 user_pw[PASSWORD_SIZE];
	sint8 i , check=0 , trials = TRAILS_NUMBER;
	uint8 time_check_flag = 0;
	uint8 user_current_status;
	uint8 mode;
	LCD_vInit();
     a9a:	0e 94 0f 04 	call	0x81e	; 0x81e <LCD_vInit>
	KYP_vInit();
     a9e:	0e 94 2a 03 	call	0x654	; 0x654 <KYP_vInit>
	SPI_vInit();
     aa2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <SPI_vInit>
	TMR0_vInit();
     aa6:	0e 94 66 0b 	call	0x16cc	; 0x16cc <TMR0_vInit>
	TMR0_COMP_SetCallBack(TMR0_ISR);
     aaa:	89 e3       	ldi	r24, 0x39	; 57
     aac:	95 e0       	ldi	r25, 0x05	; 5
     aae:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <TMR0_COMP_SetCallBack>
	
	
	
	LCD_vSendString("   Welcome To");
     ab2:	80 e7       	ldi	r24, 0x70	; 112
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
	LCD_vMoveCursor(2,1);
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
	LCD_vSendString("   SMART HOME");
     ac2:	8e e7       	ldi	r24, 0x7E	; 126
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
     aca:	2f ef       	ldi	r18, 0xFF	; 255
     acc:	33 ed       	ldi	r19, 0xD3	; 211
     ace:	40 e3       	ldi	r20, 0x30	; 48
     ad0:	21 50       	subi	r18, 0x01	; 1
     ad2:	30 40       	sbci	r19, 0x00	; 0
     ad4:	40 40       	sbci	r20, 0x00	; 0
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <main+0x4a>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <main+0x54>
     ada:	00 00       	nop
	_delay_ms(2000);
	LCD_vClearScreen();
     adc:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
	if(EEPROM_vREAD(SMART_ADMIN_PW_ADDR)==EEPROM_ADDRESS_EMPTY)
     ae0:	80 e1       	ldi	r24, 0x10	; 16
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 1b 03 	call	0x636	; 0x636 <EEPROM_vREAD>
     ae8:	8f 3f       	cpi	r24, 0xFF	; 255
     aea:	09 f0       	breq	.+2      	; 0xaee <main+0x68>
     aec:	aa c0       	rjmp	.+340    	; 0xc42 <main+0x1bc>
	{
		LCD_vSendString("Set Admin PW:");
     aee:	8c e8       	ldi	r24, 0x8C	; 140
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
		LCD_vMoveCursor(2,1);
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	61 e0       	ldi	r22, 0x01	; 1
     afa:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
     afe:	0f 2e       	mov	r0, r31
     b00:	f0 e1       	ldi	r31, 0x10	; 16
     b02:	ef 2e       	mov	r14, r31
     b04:	f1 e0       	ldi	r31, 0x01	; 1
     b06:	ff 2e       	mov	r15, r31
     b08:	f0 2d       	mov	r31, r0
		for(i=0 ; i<PASSWORD_SIZE ; i++)
		{
			do{
				button = KYP_u8CheckPress();
     b0a:	0e 94 57 03 	call	0x6ae	; 0x6ae <KYP_u8CheckPress>
     b0e:	18 2f       	mov	r17, r24
     b10:	8f e7       	ldi	r24, 0x7F	; 127
     b12:	99 ea       	ldi	r25, 0xA9	; 169
     b14:	a3 e0       	ldi	r26, 0x03	; 3
     b16:	81 50       	subi	r24, 0x01	; 1
     b18:	90 40       	sbci	r25, 0x00	; 0
     b1a:	a0 40       	sbci	r26, 0x00	; 0
     b1c:	e1 f7       	brne	.-8      	; 0xb16 <main+0x90>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <main+0x9a>
     b20:	00 00       	nop
				_delay_ms(150);
			}
			while(button == NOT_PRESSED);
     b22:	1f 3f       	cpi	r17, 0xFF	; 255
     b24:	91 f3       	breq	.-28     	; 0xb0a <main+0x84>
			LCD_vSendData(button);
     b26:	81 2f       	mov	r24, r17
     b28:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_vSendData>
     b2c:	2f ef       	ldi	r18, 0xFF	; 255
     b2e:	30 e7       	ldi	r19, 0x70	; 112
     b30:	42 e0       	ldi	r20, 0x02	; 2
     b32:	21 50       	subi	r18, 0x01	; 1
     b34:	30 40       	sbci	r19, 0x00	; 0
     b36:	40 40       	sbci	r20, 0x00	; 0
     b38:	e1 f7       	brne	.-8      	; 0xb32 <main+0xac>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <main+0xb6>
     b3c:	00 00       	nop
{
	TMR0_counter++;
}


int main(void)
     b3e:	6e 2d       	mov	r22, r14
     b40:	6f 50       	subi	r22, 0x0F	; 15
				_delay_ms(150);
			}
			while(button == NOT_PRESSED);
			LCD_vSendData(button);
			_delay_ms(100);
			LCD_vMoveCursor(2,1+i);
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
			LCD_vSendData('*');
     b48:	8a e2       	ldi	r24, 0x2A	; 42
     b4a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_vSendData>
			EEPROM_vWrite(SMART_ADMIN_PW_ADDR+i,button);
     b4e:	c7 01       	movw	r24, r14
     b50:	61 2f       	mov	r22, r17
     b52:	0e 94 12 03 	call	0x624	; 0x624 <EEPROM_vWrite>
     b56:	08 94       	sec
     b58:	e1 1c       	adc	r14, r1
     b5a:	f1 1c       	adc	r15, r1
	LCD_vClearScreen();
	if(EEPROM_vREAD(SMART_ADMIN_PW_ADDR)==EEPROM_ADDRESS_EMPTY)
	{
		LCD_vSendString("Set Admin PW:");
		LCD_vMoveCursor(2,1);
		for(i=0 ; i<PASSWORD_SIZE ; i++)
     b5c:	34 e1       	ldi	r19, 0x14	; 20
     b5e:	e3 16       	cp	r14, r19
     b60:	31 e0       	ldi	r19, 0x01	; 1
     b62:	f3 06       	cpc	r15, r19
     b64:	91 f6       	brne	.-92     	; 0xb0a <main+0x84>
     b66:	8f e7       	ldi	r24, 0x7F	; 127
     b68:	99 ea       	ldi	r25, 0xA9	; 169
     b6a:	a3 e0       	ldi	r26, 0x03	; 3
     b6c:	81 50       	subi	r24, 0x01	; 1
     b6e:	90 40       	sbci	r25, 0x00	; 0
     b70:	a0 40       	sbci	r26, 0x00	; 0
     b72:	e1 f7       	brne	.-8      	; 0xb6c <main+0xe6>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <main+0xf0>
     b76:	00 00       	nop
			LCD_vMoveCursor(2,1+i);
			LCD_vSendData('*');
			EEPROM_vWrite(SMART_ADMIN_PW_ADDR+i,button);
		}
		_delay_ms(150);
		LCD_vClearScreen();
     b78:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
		LCD_vSendString("Admin PW is set");
     b7c:	8a e9       	ldi	r24, 0x9A	; 154
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
     b84:	2f ef       	ldi	r18, 0xFF	; 255
     b86:	34 e3       	ldi	r19, 0x34	; 52
     b88:	4c e0       	ldi	r20, 0x0C	; 12
     b8a:	21 50       	subi	r18, 0x01	; 1
     b8c:	30 40       	sbci	r19, 0x00	; 0
     b8e:	40 40       	sbci	r20, 0x00	; 0
     b90:	e1 f7       	brne	.-8      	; 0xb8a <main+0x104>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <main+0x10e>
     b94:	00 00       	nop
		_delay_ms(500);
		LCD_vClearScreen();
     b96:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
		
		LCD_vSendString("Set Guest PW:");
     b9a:	8a ea       	ldi	r24, 0xAA	; 170
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
		LCD_vMoveCursor(2,1);
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
     baa:	ee 24       	eor	r14, r14
     bac:	ff 24       	eor	r15, r15
     bae:	68 94       	set
     bb0:	f0 f8       	bld	r15, 0
		for(i=0 ; i<PASSWORD_SIZE ; i++)
		{
			do{
				button = KYP_u8CheckPress();
     bb2:	0e 94 57 03 	call	0x6ae	; 0x6ae <KYP_u8CheckPress>
     bb6:	18 2f       	mov	r17, r24
     bb8:	8f e7       	ldi	r24, 0x7F	; 127
     bba:	99 ea       	ldi	r25, 0xA9	; 169
     bbc:	a3 e0       	ldi	r26, 0x03	; 3
     bbe:	81 50       	subi	r24, 0x01	; 1
     bc0:	90 40       	sbci	r25, 0x00	; 0
     bc2:	a0 40       	sbci	r26, 0x00	; 0
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <main+0x138>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <main+0x142>
     bc8:	00 00       	nop
				_delay_ms(150);
			}
			while(button == NOT_PRESSED);
     bca:	1f 3f       	cpi	r17, 0xFF	; 255
     bcc:	91 f3       	breq	.-28     	; 0xbb2 <main+0x12c>
			LCD_vSendData(button);
     bce:	81 2f       	mov	r24, r17
     bd0:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_vSendData>
     bd4:	2f ef       	ldi	r18, 0xFF	; 255
     bd6:	30 e7       	ldi	r19, 0x70	; 112
     bd8:	42 e0       	ldi	r20, 0x02	; 2
     bda:	21 50       	subi	r18, 0x01	; 1
     bdc:	30 40       	sbci	r19, 0x00	; 0
     bde:	40 40       	sbci	r20, 0x00	; 0
     be0:	e1 f7       	brne	.-8      	; 0xbda <main+0x154>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <main+0x15e>
     be4:	00 00       	nop
{
	TMR0_counter++;
}


int main(void)
     be6:	6e 2d       	mov	r22, r14
     be8:	6f 5f       	subi	r22, 0xFF	; 255
				_delay_ms(150);
			}
			while(button == NOT_PRESSED);
			LCD_vSendData(button);
			_delay_ms(100);
			LCD_vMoveCursor(2,1+i);
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
			LCD_vSendData('*');
     bf0:	8a e2       	ldi	r24, 0x2A	; 42
     bf2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_vSendData>
			EEPROM_vWrite(SMART_GUEST_PW_ADDR+i,button);
     bf6:	c7 01       	movw	r24, r14
     bf8:	61 2f       	mov	r22, r17
     bfa:	0e 94 12 03 	call	0x624	; 0x624 <EEPROM_vWrite>
     bfe:	08 94       	sec
     c00:	e1 1c       	adc	r14, r1
     c02:	f1 1c       	adc	r15, r1
		_delay_ms(500);
		LCD_vClearScreen();
		
		LCD_vSendString("Set Guest PW:");
		LCD_vMoveCursor(2,1);
		for(i=0 ; i<PASSWORD_SIZE ; i++)
     c04:	34 e0       	ldi	r19, 0x04	; 4
     c06:	e3 16       	cp	r14, r19
     c08:	31 e0       	ldi	r19, 0x01	; 1
     c0a:	f3 06       	cpc	r15, r19
     c0c:	91 f6       	brne	.-92     	; 0xbb2 <main+0x12c>
     c0e:	8f e7       	ldi	r24, 0x7F	; 127
     c10:	99 ea       	ldi	r25, 0xA9	; 169
     c12:	a3 e0       	ldi	r26, 0x03	; 3
     c14:	81 50       	subi	r24, 0x01	; 1
     c16:	90 40       	sbci	r25, 0x00	; 0
     c18:	a0 40       	sbci	r26, 0x00	; 0
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <main+0x18e>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <main+0x198>
     c1e:	00 00       	nop
			LCD_vMoveCursor(2,1+i);
			LCD_vSendData('*');
			EEPROM_vWrite(SMART_GUEST_PW_ADDR+i,button);
		}			
		_delay_ms(150);
		LCD_vClearScreen();
     c20:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
		LCD_vSendString("Guest PW is set");
     c24:	88 eb       	ldi	r24, 0xB8	; 184
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
     c2c:	2f ef       	ldi	r18, 0xFF	; 255
     c2e:	34 e3       	ldi	r19, 0x34	; 52
     c30:	4c e0       	ldi	r20, 0x0C	; 12
     c32:	21 50       	subi	r18, 0x01	; 1
     c34:	30 40       	sbci	r19, 0x00	; 0
     c36:	40 40       	sbci	r20, 0x00	; 0
     c38:	e1 f7       	brne	.-8      	; 0xc32 <main+0x1ac>
     c3a:	00 c0       	rjmp	.+0      	; 0xc3c <main+0x1b6>
     c3c:	00 00       	nop
		_delay_ms(500);
		LCD_vClearScreen();
     c3e:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
			{
				LCD_vSendString("Welcome Guest!");
				_delay_ms(1000);
			}
			TMR0_counter = 0;
			while(TMR0_counter<(SESSION_TIME_OUT*100))
     c42:	aa 24       	eor	r10, r10
     c44:	33 e0       	ldi	r19, 0x03	; 3
     c46:	3b 87       	std	Y+11, r19	; 0x0b
		while(mode != '1' && mode != '2');
		_delay_ms(150);
		LCD_vClearScreen();
		do{
			LCD_vSendString("Enter Password:");
			LCD_vMoveCursor(2,1);
     c48:	ae 01       	movw	r20, r28
     c4a:	4f 5f       	subi	r20, 0xFF	; 255
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255
     c4e:	5e 83       	std	Y+6, r21	; 0x06
     c50:	4d 83       	std	Y+5, r20	; 0x05
     c52:	4f 83       	std	Y+7, r20	; 0x07
     c54:	58 87       	std	Y+8, r21	; 0x08
					do
					{
						if(button != NOT_PRESSED)
						{
							LCD_vClearScreen();
							LCD_vSendString("Enter from 1->3");
     c56:	0f 2e       	mov	r0, r31
     c58:	f5 e0       	ldi	r31, 0x05	; 5
     c5a:	2f 2e       	mov	r2, r31
     c5c:	f2 e0       	ldi	r31, 0x02	; 2
     c5e:	3f 2e       	mov	r3, r31
     c60:	f0 2d       	mov	r31, r0
					do
					{
						if(button != NOT_PRESSED)
						{
							LCD_vClearScreen();
							LCD_vSendString("Enter from 1->4");
     c62:	0f 2e       	mov	r0, r31
     c64:	fc e7       	ldi	r31, 0x7C	; 124
     c66:	4f 2e       	mov	r4, r31
     c68:	f1 e0       	ldi	r31, 0x01	; 1
     c6a:	5f 2e       	mov	r5, r31
     c6c:	f0 2d       	mov	r31, r0
		_delay_ms(500);
		LCD_vClearScreen();
	}
    while(1)
    {
		LCD_vClearScreen();
     c6e:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
        LCD_vSendString("Choose Mode:");
     c72:	88 ec       	ldi	r24, 0xC8	; 200
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
		LCD_vMoveCursor(2,1);
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
		LCD_vSendString("1:Admin  2:Guest");
     c82:	85 ed       	ldi	r24, 0xD5	; 213
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
		do{
			mode = KYP_u8CheckPress();
     c8a:	0e 94 57 03 	call	0x6ae	; 0x6ae <KYP_u8CheckPress>
     c8e:	2f e7       	ldi	r18, 0x7F	; 127
     c90:	39 ea       	ldi	r19, 0xA9	; 169
     c92:	43 e0       	ldi	r20, 0x03	; 3
     c94:	21 50       	subi	r18, 0x01	; 1
     c96:	30 40       	sbci	r19, 0x00	; 0
     c98:	40 40       	sbci	r20, 0x00	; 0
     c9a:	e1 f7       	brne	.-8      	; 0xc94 <main+0x20e>
     c9c:	00 c0       	rjmp	.+0      	; 0xc9e <main+0x218>
     c9e:	00 00       	nop
			_delay_ms(150);
		}
		while(mode != '1' && mode != '2');
     ca0:	98 2f       	mov	r25, r24
     ca2:	91 53       	subi	r25, 0x31	; 49
     ca4:	92 30       	cpi	r25, 0x02	; 2
     ca6:	88 f7       	brcc	.-30     	; 0xc8a <main+0x204>
     ca8:	b8 2e       	mov	r11, r24
     caa:	8f e7       	ldi	r24, 0x7F	; 127
     cac:	99 ea       	ldi	r25, 0xA9	; 169
     cae:	a3 e0       	ldi	r26, 0x03	; 3
     cb0:	81 50       	subi	r24, 0x01	; 1
     cb2:	90 40       	sbci	r25, 0x00	; 0
     cb4:	a0 40       	sbci	r26, 0x00	; 0
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <main+0x22a>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <main+0x234>
     cba:	00 00       	nop
		_delay_ms(150);
		LCD_vClearScreen();
     cbc:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
		do{
			LCD_vSendString("Enter Password:");
			LCD_vMoveCursor(2,1);
     cc0:	99 24       	eor	r9, r9
     cc2:	93 94       	inc	r9
			for(i=0 ; i<PASSWORD_SIZE ; i++)
     cc4:	66 24       	eor	r6, r6
     cc6:	77 24       	eor	r7, r7
     cc8:	68 94       	set
     cca:	70 f8       	bld	r7, 0
				{
					check = 1;
				}
				else if(mode == '2' && user_pw[i]!=EEPROM_vREAD(SMART_GUEST_PW_ADDR+i))
				{
					check = 1;
     ccc:	99 86       	std	Y+9, r9	; 0x09
		}
		while(mode != '1' && mode != '2');
		_delay_ms(150);
		LCD_vClearScreen();
		do{
			LCD_vSendString("Enter Password:");
     cce:	86 ee       	ldi	r24, 0xE6	; 230
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
			LCD_vMoveCursor(2,1);
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	69 2d       	mov	r22, r9
     cda:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
     cde:	6e 01       	movw	r12, r28
     ce0:	08 94       	sec
     ce2:	c1 1c       	adc	r12, r1
     ce4:	d1 1c       	adc	r13, r1
     ce6:	ef 80       	ldd	r14, Y+7	; 0x07
     ce8:	f8 84       	ldd	r15, Y+8	; 0x08
     cea:	09 2d       	mov	r16, r9
			for(i=0 ; i<PASSWORD_SIZE ; i++)
			{
				do{
					button = KYP_u8CheckPress();
     cec:	0e 94 57 03 	call	0x6ae	; 0x6ae <KYP_u8CheckPress>
     cf0:	18 2f       	mov	r17, r24
     cf2:	2f e7       	ldi	r18, 0x7F	; 127
     cf4:	39 ea       	ldi	r19, 0xA9	; 169
     cf6:	43 e0       	ldi	r20, 0x03	; 3
     cf8:	21 50       	subi	r18, 0x01	; 1
     cfa:	30 40       	sbci	r19, 0x00	; 0
     cfc:	40 40       	sbci	r20, 0x00	; 0
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <main+0x272>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <main+0x27c>
     d02:	00 00       	nop
					_delay_ms(150);
				}
				while(button == NOT_PRESSED);
     d04:	8f 3f       	cpi	r24, 0xFF	; 255
     d06:	91 f3       	breq	.-28     	; 0xcec <main+0x266>
				LCD_vSendData(button);
     d08:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_vSendData>
     d0c:	8f ef       	ldi	r24, 0xFF	; 255
     d0e:	90 e7       	ldi	r25, 0x70	; 112
     d10:	a2 e0       	ldi	r26, 0x02	; 2
     d12:	81 50       	subi	r24, 0x01	; 1
     d14:	90 40       	sbci	r25, 0x00	; 0
     d16:	a0 40       	sbci	r26, 0x00	; 0
     d18:	e1 f7       	brne	.-8      	; 0xd12 <main+0x28c>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <main+0x296>
     d1c:	00 00       	nop
				_delay_ms(100);
				LCD_vMoveCursor(2,1+i);
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	60 2f       	mov	r22, r16
     d22:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
				LCD_vSendData('*');
     d26:	8a e2       	ldi	r24, 0x2A	; 42
     d28:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_vSendData>
				user_pw[i]=button;
     d2c:	d7 01       	movw	r26, r14
     d2e:	1d 93       	st	X+, r17
     d30:	7d 01       	movw	r14, r26
     d32:	0f 5f       	subi	r16, 0xFF	; 255
		_delay_ms(150);
		LCD_vClearScreen();
		do{
			LCD_vSendString("Enter Password:");
			LCD_vMoveCursor(2,1);
			for(i=0 ; i<PASSWORD_SIZE ; i++)
     d34:	05 30       	cpi	r16, 0x05	; 5
     d36:	d1 f6       	brne	.-76     	; 0xcec <main+0x266>
     d38:	73 01       	movw	r14, r6
     d3a:	00 e0       	ldi	r16, 0x00	; 0
     d3c:	8b 2d       	mov	r24, r11
     d3e:	b0 2e       	mov	r11, r16
     d40:	08 2f       	mov	r16, r24
				user_pw[i]=button;
			}
			check = 0;
			for(i=0 ; i<PASSWORD_SIZE ; i++)
			{
				if(mode == '1' && user_pw[i]!=EEPROM_vREAD(SMART_ADMIN_PW_ADDR+i))
     d42:	01 33       	cpi	r16, 0x31	; 49
     d44:	51 f4       	brne	.+20     	; 0xd5a <main+0x2d4>
     d46:	f6 01       	movw	r30, r12
     d48:	10 81       	ld	r17, Z
     d4a:	c7 01       	movw	r24, r14
     d4c:	40 96       	adiw	r24, 0x10	; 16
     d4e:	0e 94 1b 03 	call	0x636	; 0x636 <EEPROM_vREAD>
     d52:	18 17       	cp	r17, r24
     d54:	59 f0       	breq	.+22     	; 0xd6c <main+0x2e6>
				{
					check = 1;
     d56:	b9 84       	ldd	r11, Y+9	; 0x09
     d58:	09 c0       	rjmp	.+18     	; 0xd6c <main+0x2e6>
				}
				else if(mode == '2' && user_pw[i]!=EEPROM_vREAD(SMART_GUEST_PW_ADDR+i))
     d5a:	02 33       	cpi	r16, 0x32	; 50
     d5c:	39 f4       	brne	.+14     	; 0xd6c <main+0x2e6>
     d5e:	d6 01       	movw	r26, r12
     d60:	1c 91       	ld	r17, X
     d62:	c7 01       	movw	r24, r14
     d64:	0e 94 1b 03 	call	0x636	; 0x636 <EEPROM_vREAD>
     d68:	18 13       	cpse	r17, r24
				{
					check = 1;
     d6a:	b9 84       	ldd	r11, Y+9	; 0x09
			{
				if(mode == '1' && user_pw[i]!=EEPROM_vREAD(SMART_ADMIN_PW_ADDR+i))
				{
					check = 1;
				}
				else if(mode == '2' && user_pw[i]!=EEPROM_vREAD(SMART_GUEST_PW_ADDR+i))
     d6c:	08 94       	sec
     d6e:	c1 1c       	adc	r12, r1
     d70:	d1 1c       	adc	r13, r1
     d72:	08 94       	sec
     d74:	e1 1c       	adc	r14, r1
     d76:	f1 1c       	adc	r15, r1
				LCD_vMoveCursor(2,1+i);
				LCD_vSendData('*');
				user_pw[i]=button;
			}
			check = 0;
			for(i=0 ; i<PASSWORD_SIZE ; i++)
     d78:	b4 e0       	ldi	r27, 0x04	; 4
     d7a:	eb 16       	cp	r14, r27
     d7c:	b1 e0       	ldi	r27, 0x01	; 1
     d7e:	fb 06       	cpc	r15, r27
     d80:	01 f7       	brne	.-64     	; 0xd42 <main+0x2bc>
     d82:	80 2f       	mov	r24, r16
     d84:	0b 2d       	mov	r16, r11
     d86:	b8 2e       	mov	r11, r24
				else if(mode == '2' && user_pw[i]!=EEPROM_vREAD(SMART_GUEST_PW_ADDR+i))
				{
					check = 1;
				}
			}
			LCD_vClearScreen();
     d88:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
			if(check == 1)
     d8c:	01 30       	cpi	r16, 0x01	; 1
     d8e:	29 f5       	brne	.+74     	; 0xdda <main+0x354>
			{
				LCD_vSendString("Wrong Password");
     d90:	86 ef       	ldi	r24, 0xF6	; 246
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
				LCD_vMoveCursor(2,1);
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	69 2d       	mov	r22, r9
     d9c:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
				trials--;
     da0:	eb 85       	ldd	r30, Y+11	; 0x0b
     da2:	e1 50       	subi	r30, 0x01	; 1
     da4:	eb 87       	std	Y+11, r30	; 0x0b
				LCD_vSendNumber(trials);
     da6:	8e 2f       	mov	r24, r30
     da8:	99 27       	eor	r25, r25
     daa:	87 fd       	sbrc	r24, 7
     dac:	90 95       	com	r25
     dae:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <LCD_vSendNumber>
				LCD_vSendString(" Trials Left");
     db2:	85 e0       	ldi	r24, 0x05	; 5
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
     dba:	2f ef       	ldi	r18, 0xFF	; 255
     dbc:	39 e6       	ldi	r19, 0x69	; 105
     dbe:	48 e1       	ldi	r20, 0x18	; 24
     dc0:	21 50       	subi	r18, 0x01	; 1
     dc2:	30 40       	sbci	r19, 0x00	; 0
     dc4:	40 40       	sbci	r20, 0x00	; 0
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <main+0x33a>
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <main+0x344>
     dca:	00 00       	nop
				_delay_ms(1000);
				LCD_vClearScreen();
     dcc:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
			}
		}
		while(check == 1 && trials>0);
     dd0:	3b 85       	ldd	r19, Y+11	; 0x0b
     dd2:	13 16       	cp	r1, r19
     dd4:	0c f4       	brge	.+2      	; 0xdd8 <main+0x352>
     dd6:	7b cf       	rjmp	.-266    	; 0xcce <main+0x248>
     dd8:	2a c4       	rjmp	.+2132   	; 0x162e <main+0xba8>
		LCD_vClearScreen();
     dda:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
		if(check == 1)
     dde:	01 30       	cpi	r16, 0x01	; 1
     de0:	09 f0       	breq	.+2      	; 0xde4 <main+0x35e>
     de2:	48 c0       	rjmp	.+144    	; 0xe74 <main+0x3ee>
		{
			LCD_vSendString("Try Again in ");
     de4:	82 e1       	ldi	r24, 0x12	; 18
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
			LCD_vSendNumber(TRIAL_STOP);
     dec:	8a e0       	ldi	r24, 0x0A	; 10
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <LCD_vSendNumber>
			LCD_vMoveCursor(2,1);
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	61 e0       	ldi	r22, 0x01	; 1
     df8:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
			LCD_vSendString("Seconds");
     dfc:	80 e2       	ldi	r24, 0x20	; 32
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
			TMR0_counter = 0;
     e04:	10 92 91 02 	sts	0x0291, r1
     e08:	10 92 90 02 	sts	0x0290, r1
			while(TMR0_counter < (TRIAL_STOP*100))
			{
				LCD_vMoveCursor(1,14);
				LCD_vSendNumber(TRIAL_STOP-(TMR0_counter/100));
     e0c:	0f 2e       	mov	r0, r31
     e0e:	f4 e6       	ldi	r31, 0x64	; 100
     e10:	ef 2e       	mov	r14, r31
     e12:	ff 24       	eor	r15, r15
     e14:	f0 2d       	mov	r31, r0
     e16:	0a e0       	ldi	r16, 0x0A	; 10
     e18:	10 e0       	ldi	r17, 0x00	; 0
				LCD_vSendString("   ");
     e1a:	0f 2e       	mov	r0, r31
     e1c:	f8 e2       	ldi	r31, 0x28	; 40
     e1e:	cf 2e       	mov	r12, r31
     e20:	f1 e0       	ldi	r31, 0x01	; 1
     e22:	df 2e       	mov	r13, r31
     e24:	f0 2d       	mov	r31, r0
			LCD_vMoveCursor(2,1);
			LCD_vSendString("Seconds");
			TMR0_counter = 0;
			while(TMR0_counter < (TRIAL_STOP*100))
			{
				LCD_vMoveCursor(1,14);
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	6e e0       	ldi	r22, 0x0E	; 14
     e2a:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
				LCD_vSendNumber(TRIAL_STOP-(TMR0_counter/100));
     e2e:	80 91 90 02 	lds	r24, 0x0290
     e32:	90 91 91 02 	lds	r25, 0x0291
     e36:	b7 01       	movw	r22, r14
     e38:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__udivmodhi4>
     e3c:	c8 01       	movw	r24, r16
     e3e:	86 1b       	sub	r24, r22
     e40:	97 0b       	sbc	r25, r23
     e42:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <LCD_vSendNumber>
				LCD_vSendString("   ");
     e46:	c6 01       	movw	r24, r12
     e48:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	90 e7       	ldi	r25, 0x70	; 112
     e50:	a2 e0       	ldi	r26, 0x02	; 2
     e52:	81 50       	subi	r24, 0x01	; 1
     e54:	90 40       	sbci	r25, 0x00	; 0
     e56:	a0 40       	sbci	r26, 0x00	; 0
     e58:	e1 f7       	brne	.-8      	; 0xe52 <main+0x3cc>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <main+0x3d6>
     e5c:	00 00       	nop
			LCD_vSendString("Try Again in ");
			LCD_vSendNumber(TRIAL_STOP);
			LCD_vMoveCursor(2,1);
			LCD_vSendString("Seconds");
			TMR0_counter = 0;
			while(TMR0_counter < (TRIAL_STOP*100))
     e5e:	80 91 90 02 	lds	r24, 0x0290
     e62:	90 91 91 02 	lds	r25, 0x0291
     e66:	a3 e0       	ldi	r26, 0x03	; 3
     e68:	88 3e       	cpi	r24, 0xE8	; 232
     e6a:	9a 07       	cpc	r25, r26
     e6c:	e0 f2       	brcs	.-72     	; 0xe26 <main+0x3a0>
				LCD_vMoveCursor(1,14);
				LCD_vSendNumber(TRIAL_STOP-(TMR0_counter/100));
				LCD_vSendString("   ");
				_delay_ms(100);
			}
			LCD_vClearScreen();
     e6e:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
     e72:	fd ce       	rjmp	.-518    	; 0xc6e <main+0x1e8>
		}
		else
		{
			if(mode == '1')
     e74:	b1 e3       	ldi	r27, 0x31	; 49
     e76:	bb 16       	cp	r11, r27
     e78:	71 f4       	brne	.+28     	; 0xe96 <main+0x410>
			{
				LCD_vSendString("Welcome Admin!");
     e7a:	8c e2       	ldi	r24, 0x2C	; 44
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
     e82:	2f ef       	ldi	r18, 0xFF	; 255
     e84:	39 e6       	ldi	r19, 0x69	; 105
     e86:	48 e1       	ldi	r20, 0x18	; 24
     e88:	21 50       	subi	r18, 0x01	; 1
     e8a:	30 40       	sbci	r19, 0x00	; 0
     e8c:	40 40       	sbci	r20, 0x00	; 0
     e8e:	e1 f7       	brne	.-8      	; 0xe88 <main+0x402>
     e90:	00 c0       	rjmp	.+0      	; 0xe92 <main+0x40c>
     e92:	00 00       	nop
     e94:	10 c0       	rjmp	.+32     	; 0xeb6 <main+0x430>
				_delay_ms(1000);
			}
			else if(mode == '2')
     e96:	32 e3       	ldi	r19, 0x32	; 50
     e98:	b3 16       	cp	r11, r19
     e9a:	69 f4       	brne	.+26     	; 0xeb6 <main+0x430>
			{
				LCD_vSendString("Welcome Guest!");
     e9c:	8b e3       	ldi	r24, 0x3B	; 59
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
     ea4:	8f ef       	ldi	r24, 0xFF	; 255
     ea6:	99 e6       	ldi	r25, 0x69	; 105
     ea8:	a8 e1       	ldi	r26, 0x18	; 24
     eaa:	81 50       	subi	r24, 0x01	; 1
     eac:	90 40       	sbci	r25, 0x00	; 0
     eae:	a0 40       	sbci	r26, 0x00	; 0
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <main+0x424>
     eb2:	00 c0       	rjmp	.+0      	; 0xeb4 <main+0x42e>
     eb4:	00 00       	nop
				_delay_ms(1000);
			}
			TMR0_counter = 0;
     eb6:	10 92 91 02 	sts	0x0291, r1
     eba:	10 92 90 02 	sts	0x0290, r1
				{
					LCD_vClearScreen();
					LCD_vSendString("Choose an Option");
					_delay_ms(1000);
					LCD_vClearScreen();
					LCD_vSendString("1:ROOM1  2:ROOM2");
     ebe:	0f 2e       	mov	r0, r31
     ec0:	fb e5       	ldi	r31, 0x5B	; 91
     ec2:	ef 2e       	mov	r14, r31
     ec4:	f1 e0       	ldi	r31, 0x01	; 1
     ec6:	ff 2e       	mov	r15, r31
     ec8:	f0 2d       	mov	r31, r0
					LCD_vMoveCursor(2,1);
					LCD_vSendString("3:ROOM3");
     eca:	0f 2e       	mov	r0, r31
     ecc:	fd ef       	ldi	r31, 0xFD	; 253
     ece:	6f 2e       	mov	r6, r31
     ed0:	f1 e0       	ldi	r31, 0x01	; 1
     ed2:	7f 2e       	mov	r7, r31
     ed4:	f0 2d       	mov	r31, r0
					LCD_vSendString("Choose an Option");
					_delay_ms(1000);
					LCD_vClearScreen();
					LCD_vSendString("1:ROOM1  2:ROOM2");
					LCD_vMoveCursor(2,1);
					LCD_vSendString("3:ROOM3  4:MORE");
     ed6:	0f 2e       	mov	r0, r31
     ed8:	fc e6       	ldi	r31, 0x6C	; 108
     eda:	cf 2e       	mov	r12, r31
     edc:	f1 e0       	ldi	r31, 0x01	; 1
     ede:	df 2e       	mov	r13, r31
     ee0:	f0 2d       	mov	r31, r0
					else if(button == '4')
					{
						LCD_vClearScreen();
						LCD_vSendString("1:FAN1   2:FAN2");
						LCD_vMoveCursor(2,1);
						LCD_vSendString("3:GARAGE 4:More");
     ee2:	0a 2d       	mov	r16, r10
			}
			TMR0_counter = 0;
			while(TMR0_counter<(SESSION_TIME_OUT*100))
			{
				check = 0; trials = TRAILS_NUMBER;
				if(mode == '1')
     ee4:	91 e3       	ldi	r25, 0x31	; 49
     ee6:	b9 16       	cp	r11, r25
     ee8:	09 f0       	breq	.+2      	; 0xeec <main+0x466>
     eea:	2b c2       	rjmp	.+1110   	; 0x1342 <main+0x8bc>
				{
					LCD_vClearScreen();
     eec:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
					LCD_vSendString("Choose an Option");
     ef0:	8a e4       	ldi	r24, 0x4A	; 74
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
     ef8:	2f ef       	ldi	r18, 0xFF	; 255
     efa:	39 e6       	ldi	r19, 0x69	; 105
     efc:	48 e1       	ldi	r20, 0x18	; 24
     efe:	21 50       	subi	r18, 0x01	; 1
     f00:	30 40       	sbci	r19, 0x00	; 0
     f02:	40 40       	sbci	r20, 0x00	; 0
     f04:	e1 f7       	brne	.-8      	; 0xefe <main+0x478>
     f06:	00 c0       	rjmp	.+0      	; 0xf08 <main+0x482>
     f08:	00 00       	nop
					_delay_ms(1000);
					LCD_vClearScreen();
     f0a:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
					LCD_vSendString("1:ROOM1  2:ROOM2");
     f0e:	c7 01       	movw	r24, r14
     f10:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
					LCD_vMoveCursor(2,1);
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
					LCD_vSendString("3:ROOM3  4:MORE");
     f1c:	c6 01       	movw	r24, r12
     f1e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
					
					button = NOT_PRESSED;
					TMR0_counter=0;
     f22:	10 92 91 02 	sts	0x0291, r1
     f26:	10 92 90 02 	sts	0x0290, r1
     f2a:	1c c0       	rjmp	.+56     	; 0xf64 <main+0x4de>
					do
					{
						if(button != NOT_PRESSED)
     f2c:	8f 3f       	cpi	r24, 0xFF	; 255
     f2e:	d1 f0       	breq	.+52     	; 0xf64 <main+0x4de>
						{
							LCD_vClearScreen();
     f30:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
							LCD_vSendString("Enter from 1->4");
     f34:	c2 01       	movw	r24, r4
     f36:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
     f3c:	99 e6       	ldi	r25, 0x69	; 105
     f3e:	a8 e1       	ldi	r26, 0x18	; 24
     f40:	81 50       	subi	r24, 0x01	; 1
     f42:	90 40       	sbci	r25, 0x00	; 0
     f44:	a0 40       	sbci	r26, 0x00	; 0
     f46:	e1 f7       	brne	.-8      	; 0xf40 <main+0x4ba>
     f48:	00 c0       	rjmp	.+0      	; 0xf4a <main+0x4c4>
     f4a:	00 00       	nop
							_delay_ms(1000);
							LCD_vClearScreen();
     f4c:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
							LCD_vSendString("1:ROOM1  2:ROOM2");
     f50:	c7 01       	movw	r24, r14
     f52:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
							LCD_vMoveCursor(2,1);
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
							LCD_vSendString("3:ROOM3  4:MORE");
     f5e:	c6 01       	movw	r24, r12
     f60:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
						}
						button = KYP_u8CheckPress();
     f64:	0e 94 57 03 	call	0x6ae	; 0x6ae <KYP_u8CheckPress>
     f68:	2f e7       	ldi	r18, 0x7F	; 127
     f6a:	39 ea       	ldi	r19, 0xA9	; 169
     f6c:	43 e0       	ldi	r20, 0x03	; 3
     f6e:	21 50       	subi	r18, 0x01	; 1
     f70:	30 40       	sbci	r19, 0x00	; 0
     f72:	40 40       	sbci	r20, 0x00	; 0
     f74:	e1 f7       	brne	.-8      	; 0xf6e <main+0x4e8>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <main+0x4f2>
     f78:	00 00       	nop
						_delay_ms(150);
					} while (button != '1' && button != '2' && button != '3' && button !='4' && TMR0_counter<(SESSION_TIME_OUT*100));
     f7a:	28 2f       	mov	r18, r24
     f7c:	21 53       	subi	r18, 0x31	; 49
     f7e:	24 30       	cpi	r18, 0x04	; 4
     f80:	48 f0       	brcs	.+18     	; 0xf94 <main+0x50e>
     f82:	20 91 90 02 	lds	r18, 0x0290
     f86:	30 91 91 02 	lds	r19, 0x0291
     f8a:	43 e0       	ldi	r20, 0x03	; 3
     f8c:	28 3e       	cpi	r18, 0xE8	; 232
     f8e:	34 07       	cpc	r19, r20
     f90:	68 f2       	brcs	.-102    	; 0xf2c <main+0x4a6>
     f92:	09 c0       	rjmp	.+18     	; 0xfa6 <main+0x520>
     f94:	18 2f       	mov	r17, r24
					if(TMR0_counter>=(SESSION_TIME_OUT*100))
     f96:	80 91 90 02 	lds	r24, 0x0290
     f9a:	90 91 91 02 	lds	r25, 0x0291
     f9e:	53 e0       	ldi	r21, 0x03	; 3
     fa0:	88 3e       	cpi	r24, 0xE8	; 232
     fa2:	95 07       	cpc	r25, r21
     fa4:	90 f0       	brcs	.+36     	; 0xfca <main+0x544>
					{
						LCD_vClearScreen();
     fa6:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
						LCD_vSendString("Session TimedOut");
     faa:	8c e8       	ldi	r24, 0x8C	; 140
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	99 e6       	ldi	r25, 0x69	; 105
     fb6:	a8 e1       	ldi	r26, 0x18	; 24
     fb8:	81 50       	subi	r24, 0x01	; 1
     fba:	90 40       	sbci	r25, 0x00	; 0
     fbc:	a0 40       	sbci	r26, 0x00	; 0
     fbe:	e1 f7       	brne	.-8      	; 0xfb8 <main+0x532>
     fc0:	00 c0       	rjmp	.+0      	; 0xfc2 <main+0x53c>
     fc2:	00 00       	nop
						_delay_ms(1000);
						LCD_vClearScreen();
     fc4:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
     fc8:	3a c2       	rjmp	.+1140   	; 0x143e <main+0x9b8>
					}
					else if(button == '4')
     fca:	14 33       	cpi	r17, 0x34	; 52
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <main+0x54a>
     fce:	aa c1       	rjmp	.+852    	; 0x1324 <main+0x89e>
					{
						LCD_vClearScreen();
     fd0:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
						LCD_vSendString("1:FAN1   2:FAN2");
     fd4:	8d e9       	ldi	r24, 0x9D	; 157
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
						LCD_vMoveCursor(2,1);
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
						LCD_vSendString("3:GARAGE 4:More");
     fe4:	8d ea       	ldi	r24, 0xAD	; 173
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
						button = NOT_PRESSED;
						TMR0_counter=0;
     fec:	10 92 91 02 	sts	0x0291, r1
     ff0:	10 92 90 02 	sts	0x0290, r1
     ff4:	1e c0       	rjmp	.+60     	; 0x1032 <main+0x5ac>
						do
						{
							if(button != NOT_PRESSED)
     ff6:	8f 3f       	cpi	r24, 0xFF	; 255
     ff8:	e1 f0       	breq	.+56     	; 0x1032 <main+0x5ac>
							{
								LCD_vClearScreen();
     ffa:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
								LCD_vSendString("Enter from 1->4");
     ffe:	c2 01       	movw	r24, r4
    1000:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    1004:	2f ef       	ldi	r18, 0xFF	; 255
    1006:	39 e6       	ldi	r19, 0x69	; 105
    1008:	48 e1       	ldi	r20, 0x18	; 24
    100a:	21 50       	subi	r18, 0x01	; 1
    100c:	30 40       	sbci	r19, 0x00	; 0
    100e:	40 40       	sbci	r20, 0x00	; 0
    1010:	e1 f7       	brne	.-8      	; 0x100a <main+0x584>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <main+0x58e>
    1014:	00 00       	nop
								_delay_ms(1000);
								LCD_vClearScreen();
    1016:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
								LCD_vSendString("1:FAN1   2:FAN2");
    101a:	8d e9       	ldi	r24, 0x9D	; 157
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
								LCD_vMoveCursor(2,1);
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
								LCD_vSendString("3:GARAGE 4:More");
    102a:	8d ea       	ldi	r24, 0xAD	; 173
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
							}
							button = KYP_u8CheckPress();
    1032:	0e 94 57 03 	call	0x6ae	; 0x6ae <KYP_u8CheckPress>
    1036:	2f e7       	ldi	r18, 0x7F	; 127
    1038:	39 ea       	ldi	r19, 0xA9	; 169
    103a:	43 e0       	ldi	r20, 0x03	; 3
    103c:	21 50       	subi	r18, 0x01	; 1
    103e:	30 40       	sbci	r19, 0x00	; 0
    1040:	40 40       	sbci	r20, 0x00	; 0
    1042:	e1 f7       	brne	.-8      	; 0x103c <main+0x5b6>
    1044:	00 c0       	rjmp	.+0      	; 0x1046 <main+0x5c0>
    1046:	00 00       	nop
							_delay_ms(150);
						} while (button != '1' && button != '2' && button != '3' && button!='4' && TMR0_counter<(SESSION_TIME_OUT*100));
    1048:	28 2f       	mov	r18, r24
    104a:	21 53       	subi	r18, 0x31	; 49
    104c:	24 30       	cpi	r18, 0x04	; 4
    104e:	48 f0       	brcs	.+18     	; 0x1062 <main+0x5dc>
    1050:	20 91 90 02 	lds	r18, 0x0290
    1054:	30 91 91 02 	lds	r19, 0x0291
    1058:	43 e0       	ldi	r20, 0x03	; 3
    105a:	28 3e       	cpi	r18, 0xE8	; 232
    105c:	34 07       	cpc	r19, r20
    105e:	58 f2       	brcs	.-106    	; 0xff6 <main+0x570>
    1060:	09 c0       	rjmp	.+18     	; 0x1074 <main+0x5ee>
    1062:	18 2f       	mov	r17, r24
						if(TMR0_counter>=(SESSION_TIME_OUT*100))
    1064:	80 91 90 02 	lds	r24, 0x0290
    1068:	90 91 91 02 	lds	r25, 0x0291
    106c:	53 e0       	ldi	r21, 0x03	; 3
    106e:	88 3e       	cpi	r24, 0xE8	; 232
    1070:	95 07       	cpc	r25, r21
    1072:	90 f0       	brcs	.+36     	; 0x1098 <main+0x612>
						{
							LCD_vClearScreen();
    1074:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
							LCD_vSendString("Session TimedOut");
    1078:	8c e8       	ldi	r24, 0x8C	; 140
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	99 e6       	ldi	r25, 0x69	; 105
    1084:	a8 e1       	ldi	r26, 0x18	; 24
    1086:	81 50       	subi	r24, 0x01	; 1
    1088:	90 40       	sbci	r25, 0x00	; 0
    108a:	a0 40       	sbci	r26, 0x00	; 0
    108c:	e1 f7       	brne	.-8      	; 0x1086 <main+0x600>
    108e:	00 c0       	rjmp	.+0      	; 0x1090 <main+0x60a>
    1090:	00 00       	nop
							_delay_ms(1000);
							LCD_vClearScreen();
    1092:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
    1096:	d3 c1       	rjmp	.+934    	; 0x143e <main+0x9b8>
						}
						else if(button>='1' && button<='3')
    1098:	23 30       	cpi	r18, 0x03	; 3
    109a:	68 f4       	brcc	.+26     	; 0x10b6 <main+0x630>
						{
							SPI_u8Tranceiver(button+3);
    109c:	81 2f       	mov	r24, r17
    109e:	8d 5f       	subi	r24, 0xFD	; 253
    10a0:	0e 94 37 0b 	call	0x166e	; 0x166e <SPI_u8Tranceiver>
							time_check_flag = button+3-48;
    10a4:	01 2f       	mov	r16, r17
    10a6:	0d 52       	subi	r16, 0x2D	; 45
							user_current_status = (button+3-49)*2;
    10a8:	11 0f       	add	r17, r17
    10aa:	0f 2e       	mov	r0, r31
    10ac:	f4 ea       	ldi	r31, 0xA4	; 164
    10ae:	8f 2e       	mov	r8, r31
    10b0:	f0 2d       	mov	r31, r0
    10b2:	81 0e       	add	r8, r17
    10b4:	c4 c1       	rjmp	.+904    	; 0x143e <main+0x9b8>
						}
						else if(button == '4')
    10b6:	14 33       	cpi	r17, 0x34	; 52
    10b8:	09 f0       	breq	.+2      	; 0x10bc <main+0x636>
    10ba:	c1 c1       	rjmp	.+898    	; 0x143e <main+0x9b8>
						{
							LCD_vClearScreen();
    10bc:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
							LCD_vSendString("1:Chng Admin PW");
    10c0:	8d eb       	ldi	r24, 0xBD	; 189
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
							LCD_vMoveCursor(2,1);
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
							LCD_vSendString("2:chng Guest PW");
    10d0:	8d ec       	ldi	r24, 0xCD	; 205
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
							button = NOT_PRESSED;
							TMR0_counter=0;
    10d8:	10 92 91 02 	sts	0x0291, r1
    10dc:	10 92 90 02 	sts	0x0290, r1
    10e0:	1f c0       	rjmp	.+62     	; 0x1120 <main+0x69a>
							do
							{
								if(button != NOT_PRESSED)
    10e2:	8f 3f       	cpi	r24, 0xFF	; 255
    10e4:	e9 f0       	breq	.+58     	; 0x1120 <main+0x69a>
								{
									LCD_vClearScreen();
    10e6:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
									LCD_vSendString("Enter from 1 or 2");
    10ea:	8d ed       	ldi	r24, 0xDD	; 221
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    10f2:	2f ef       	ldi	r18, 0xFF	; 255
    10f4:	39 e6       	ldi	r19, 0x69	; 105
    10f6:	48 e1       	ldi	r20, 0x18	; 24
    10f8:	21 50       	subi	r18, 0x01	; 1
    10fa:	30 40       	sbci	r19, 0x00	; 0
    10fc:	40 40       	sbci	r20, 0x00	; 0
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <main+0x672>
    1100:	00 c0       	rjmp	.+0      	; 0x1102 <main+0x67c>
    1102:	00 00       	nop
									_delay_ms(1000);
									LCD_vClearScreen();
    1104:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
									LCD_vSendString("1:Chng Admin PW");
    1108:	8d eb       	ldi	r24, 0xBD	; 189
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
									LCD_vMoveCursor(2,1);
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
									LCD_vSendString("2:chng Guest PW");
    1118:	8d ec       	ldi	r24, 0xCD	; 205
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
								}
								button = KYP_u8CheckPress();
    1120:	0e 94 57 03 	call	0x6ae	; 0x6ae <KYP_u8CheckPress>
    1124:	2f e7       	ldi	r18, 0x7F	; 127
    1126:	39 ea       	ldi	r19, 0xA9	; 169
    1128:	43 e0       	ldi	r20, 0x03	; 3
    112a:	21 50       	subi	r18, 0x01	; 1
    112c:	30 40       	sbci	r19, 0x00	; 0
    112e:	40 40       	sbci	r20, 0x00	; 0
    1130:	e1 f7       	brne	.-8      	; 0x112a <main+0x6a4>
    1132:	00 c0       	rjmp	.+0      	; 0x1134 <main+0x6ae>
    1134:	00 00       	nop
								_delay_ms(150);
							} while (button != '1' && button != '2' && TMR0_counter<(SESSION_TIME_OUT*100));
    1136:	98 2f       	mov	r25, r24
    1138:	91 53       	subi	r25, 0x31	; 49
    113a:	92 30       	cpi	r25, 0x02	; 2
    113c:	48 f0       	brcs	.+18     	; 0x1150 <main+0x6ca>
    113e:	20 91 90 02 	lds	r18, 0x0290
    1142:	30 91 91 02 	lds	r19, 0x0291
    1146:	43 e0       	ldi	r20, 0x03	; 3
    1148:	28 3e       	cpi	r18, 0xE8	; 232
    114a:	34 07       	cpc	r19, r20
    114c:	50 f2       	brcs	.-108    	; 0x10e2 <main+0x65c>
    114e:	08 c0       	rjmp	.+16     	; 0x1160 <main+0x6da>
							if(TMR0_counter>=(SESSION_TIME_OUT*100))
    1150:	20 91 90 02 	lds	r18, 0x0290
    1154:	30 91 91 02 	lds	r19, 0x0291
    1158:	53 e0       	ldi	r21, 0x03	; 3
    115a:	28 3e       	cpi	r18, 0xE8	; 232
    115c:	35 07       	cpc	r19, r21
    115e:	90 f0       	brcs	.+36     	; 0x1184 <main+0x6fe>
							{
								LCD_vClearScreen();
    1160:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
								LCD_vSendString("Session TimedOut");
    1164:	8c e8       	ldi	r24, 0x8C	; 140
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	99 e6       	ldi	r25, 0x69	; 105
    1170:	a8 e1       	ldi	r26, 0x18	; 24
    1172:	81 50       	subi	r24, 0x01	; 1
    1174:	90 40       	sbci	r25, 0x00	; 0
    1176:	a0 40       	sbci	r26, 0x00	; 0
    1178:	e1 f7       	brne	.-8      	; 0x1172 <main+0x6ec>
    117a:	00 c0       	rjmp	.+0      	; 0x117c <main+0x6f6>
    117c:	00 00       	nop
								_delay_ms(1000);
								LCD_vClearScreen();
    117e:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
    1182:	5d c1       	rjmp	.+698    	; 0x143e <main+0x9b8>
							}
							else if(button == '1')
    1184:	81 33       	cpi	r24, 0x31	; 49
    1186:	09 f0       	breq	.+2      	; 0x118a <main+0x704>
    1188:	66 c0       	rjmp	.+204    	; 0x1256 <main+0x7d0>
							{
								LCD_vClearScreen();
    118a:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
								LCD_vSendString("New Password:");
    118e:	8f ee       	ldi	r24, 0xEF	; 239
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
								LCD_vMoveCursor(2,1);
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
    119e:	a0 e1       	ldi	r26, 0x10	; 16
    11a0:	b1 e0       	ldi	r27, 0x01	; 1
    11a2:	ba 87       	std	Y+10, r27	; 0x0a
    11a4:	a9 87       	std	Y+9, r26	; 0x09
    11a6:	90 2e       	mov	r9, r16
    11a8:	0b 2d       	mov	r16, r11
    11aa:	0f 2e       	mov	r0, r31
    11ac:	f0 e1       	ldi	r31, 0x10	; 16
    11ae:	af 2e       	mov	r10, r31
    11b0:	f1 e0       	ldi	r31, 0x01	; 1
    11b2:	bf 2e       	mov	r11, r31
    11b4:	f0 2d       	mov	r31, r0
								for(i=0 ; i<PASSWORD_SIZE ; i++)
								{
									do{
										button = KYP_u8CheckPress();
    11b6:	0e 94 57 03 	call	0x6ae	; 0x6ae <KYP_u8CheckPress>
    11ba:	18 2f       	mov	r17, r24
    11bc:	2f e7       	ldi	r18, 0x7F	; 127
    11be:	39 ea       	ldi	r19, 0xA9	; 169
    11c0:	43 e0       	ldi	r20, 0x03	; 3
    11c2:	21 50       	subi	r18, 0x01	; 1
    11c4:	30 40       	sbci	r19, 0x00	; 0
    11c6:	40 40       	sbci	r20, 0x00	; 0
    11c8:	e1 f7       	brne	.-8      	; 0x11c2 <main+0x73c>
    11ca:	00 c0       	rjmp	.+0      	; 0x11cc <main+0x746>
    11cc:	00 00       	nop
										_delay_ms(150);
									}
									while(button == NOT_PRESSED);
    11ce:	8f 3f       	cpi	r24, 0xFF	; 255
    11d0:	91 f3       	breq	.-28     	; 0x11b6 <main+0x730>
									LCD_vSendData(button);
    11d2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_vSendData>
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	90 e7       	ldi	r25, 0x70	; 112
    11da:	a2 e0       	ldi	r26, 0x02	; 2
    11dc:	81 50       	subi	r24, 0x01	; 1
    11de:	90 40       	sbci	r25, 0x00	; 0
    11e0:	a0 40       	sbci	r26, 0x00	; 0
    11e2:	e1 f7       	brne	.-8      	; 0x11dc <main+0x756>
    11e4:	00 c0       	rjmp	.+0      	; 0x11e6 <main+0x760>
    11e6:	00 00       	nop
{
	TMR0_counter++;
}


int main(void)
    11e8:	6a 2d       	mov	r22, r10
    11ea:	6f 50       	subi	r22, 0x0F	; 15
										_delay_ms(150);
									}
									while(button == NOT_PRESSED);
									LCD_vSendData(button);
									_delay_ms(100);
									LCD_vMoveCursor(2,1+i);
    11ec:	82 e0       	ldi	r24, 0x02	; 2
    11ee:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
									LCD_vSendData('*');
    11f2:	8a e2       	ldi	r24, 0x2A	; 42
    11f4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_vSendData>
									EEPROM_vWrite(SMART_ADMIN_PW_ADDR+i,button);
    11f8:	c5 01       	movw	r24, r10
    11fa:	61 2f       	mov	r22, r17
    11fc:	0e 94 12 03 	call	0x624	; 0x624 <EEPROM_vWrite>
    1200:	08 94       	sec
    1202:	a1 1c       	adc	r10, r1
    1204:	b1 1c       	adc	r11, r1
							else if(button == '1')
							{
								LCD_vClearScreen();
								LCD_vSendString("New Password:");
								LCD_vMoveCursor(2,1);
								for(i=0 ; i<PASSWORD_SIZE ; i++)
    1206:	94 e1       	ldi	r25, 0x14	; 20
    1208:	a9 16       	cp	r10, r25
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	b9 06       	cpc	r11, r25
    120e:	99 f6       	brne	.-90     	; 0x11b6 <main+0x730>
    1210:	b0 2e       	mov	r11, r16
    1212:	09 2d       	mov	r16, r9
    1214:	2f e7       	ldi	r18, 0x7F	; 127
    1216:	39 ea       	ldi	r19, 0xA9	; 169
    1218:	43 e0       	ldi	r20, 0x03	; 3
    121a:	21 50       	subi	r18, 0x01	; 1
    121c:	30 40       	sbci	r19, 0x00	; 0
    121e:	40 40       	sbci	r20, 0x00	; 0
    1220:	e1 f7       	brne	.-8      	; 0x121a <main+0x794>
    1222:	00 c0       	rjmp	.+0      	; 0x1224 <main+0x79e>
    1224:	00 00       	nop
									LCD_vMoveCursor(2,1+i);
									LCD_vSendData('*');
									EEPROM_vWrite(SMART_ADMIN_PW_ADDR+i,button);
								}
								_delay_ms(150);
								LCD_vClearScreen();
    1226:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
								LCD_vSendString("Admin PW is set");
    122a:	8a e9       	ldi	r24, 0x9A	; 154
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	96 e1       	ldi	r25, 0x16	; 22
    1236:	a1 e1       	ldi	r26, 0x11	; 17
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	90 40       	sbci	r25, 0x00	; 0
    123c:	a0 40       	sbci	r26, 0x00	; 0
    123e:	e1 f7       	brne	.-8      	; 0x1238 <main+0x7b2>
    1240:	00 c0       	rjmp	.+0      	; 0x1242 <main+0x7bc>
    1242:	00 00       	nop
								_delay_ms(700);
								LCD_vClearScreen();
    1244:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
								TMR0_counter = 100*SESSION_TIME_OUT;
    1248:	88 ee       	ldi	r24, 0xE8	; 232
    124a:	93 e0       	ldi	r25, 0x03	; 3
    124c:	90 93 91 02 	sts	0x0291, r25
    1250:	80 93 90 02 	sts	0x0290, r24
    1254:	f4 c0       	rjmp	.+488    	; 0x143e <main+0x9b8>
							}
							else if(button == '2')
    1256:	82 33       	cpi	r24, 0x32	; 50
    1258:	09 f0       	breq	.+2      	; 0x125c <main+0x7d6>
    125a:	f1 c0       	rjmp	.+482    	; 0x143e <main+0x9b8>
							{
								LCD_vClearScreen();
    125c:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
								LCD_vSendString("New Password:");
    1260:	8f ee       	ldi	r24, 0xEF	; 239
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
								LCD_vMoveCursor(2,1);
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	61 e0       	ldi	r22, 0x01	; 1
    126c:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
    1270:	a0 e0       	ldi	r26, 0x00	; 0
    1272:	b1 e0       	ldi	r27, 0x01	; 1
    1274:	ba 87       	std	Y+10, r27	; 0x0a
    1276:	a9 87       	std	Y+9, r26	; 0x09
    1278:	90 2e       	mov	r9, r16
    127a:	0b 2d       	mov	r16, r11
    127c:	aa 24       	eor	r10, r10
    127e:	bb 24       	eor	r11, r11
    1280:	68 94       	set
    1282:	b0 f8       	bld	r11, 0
								for(i=0 ; i<PASSWORD_SIZE ; i++)
								{
									do{
										button = KYP_u8CheckPress();
    1284:	0e 94 57 03 	call	0x6ae	; 0x6ae <KYP_u8CheckPress>
    1288:	18 2f       	mov	r17, r24
    128a:	2f e7       	ldi	r18, 0x7F	; 127
    128c:	39 ea       	ldi	r19, 0xA9	; 169
    128e:	43 e0       	ldi	r20, 0x03	; 3
    1290:	21 50       	subi	r18, 0x01	; 1
    1292:	30 40       	sbci	r19, 0x00	; 0
    1294:	40 40       	sbci	r20, 0x00	; 0
    1296:	e1 f7       	brne	.-8      	; 0x1290 <main+0x80a>
    1298:	00 c0       	rjmp	.+0      	; 0x129a <main+0x814>
    129a:	00 00       	nop
										_delay_ms(150);
									}
									while(button == NOT_PRESSED);
    129c:	8f 3f       	cpi	r24, 0xFF	; 255
    129e:	91 f3       	breq	.-28     	; 0x1284 <main+0x7fe>
									LCD_vSendData(button);
    12a0:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_vSendData>
    12a4:	8f ef       	ldi	r24, 0xFF	; 255
    12a6:	90 e7       	ldi	r25, 0x70	; 112
    12a8:	a2 e0       	ldi	r26, 0x02	; 2
    12aa:	81 50       	subi	r24, 0x01	; 1
    12ac:	90 40       	sbci	r25, 0x00	; 0
    12ae:	a0 40       	sbci	r26, 0x00	; 0
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <main+0x824>
    12b2:	00 c0       	rjmp	.+0      	; 0x12b4 <main+0x82e>
    12b4:	00 00       	nop
{
	TMR0_counter++;
}


int main(void)
    12b6:	6a 2d       	mov	r22, r10
    12b8:	6f 5f       	subi	r22, 0xFF	; 255
										_delay_ms(150);
									}
									while(button == NOT_PRESSED);
									LCD_vSendData(button);
									_delay_ms(100);
									LCD_vMoveCursor(2,1+i);
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
									LCD_vSendData('*');
    12c0:	8a e2       	ldi	r24, 0x2A	; 42
    12c2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_vSendData>
									EEPROM_vWrite(SMART_GUEST_PW_ADDR+i,button);
    12c6:	c5 01       	movw	r24, r10
    12c8:	61 2f       	mov	r22, r17
    12ca:	0e 94 12 03 	call	0x624	; 0x624 <EEPROM_vWrite>
    12ce:	08 94       	sec
    12d0:	a1 1c       	adc	r10, r1
    12d2:	b1 1c       	adc	r11, r1
							else if(button == '2')
							{
								LCD_vClearScreen();
								LCD_vSendString("New Password:");
								LCD_vMoveCursor(2,1);
								for(i=0 ; i<PASSWORD_SIZE ; i++)
    12d4:	94 e0       	ldi	r25, 0x04	; 4
    12d6:	a9 16       	cp	r10, r25
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	b9 06       	cpc	r11, r25
    12dc:	99 f6       	brne	.-90     	; 0x1284 <main+0x7fe>
    12de:	b0 2e       	mov	r11, r16
    12e0:	09 2d       	mov	r16, r9
    12e2:	2f e7       	ldi	r18, 0x7F	; 127
    12e4:	39 ea       	ldi	r19, 0xA9	; 169
    12e6:	43 e0       	ldi	r20, 0x03	; 3
    12e8:	21 50       	subi	r18, 0x01	; 1
    12ea:	30 40       	sbci	r19, 0x00	; 0
    12ec:	40 40       	sbci	r20, 0x00	; 0
    12ee:	e1 f7       	brne	.-8      	; 0x12e8 <main+0x862>
    12f0:	00 c0       	rjmp	.+0      	; 0x12f2 <main+0x86c>
    12f2:	00 00       	nop
									LCD_vMoveCursor(2,1+i);
									LCD_vSendData('*');
									EEPROM_vWrite(SMART_GUEST_PW_ADDR+i,button);
								}
								_delay_ms(150);
								LCD_vClearScreen();
    12f4:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
								LCD_vSendString("Guest PW is set");
    12f8:	88 eb       	ldi	r24, 0xB8	; 184
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	96 e1       	ldi	r25, 0x16	; 22
    1304:	a1 e1       	ldi	r26, 0x11	; 17
    1306:	81 50       	subi	r24, 0x01	; 1
    1308:	90 40       	sbci	r25, 0x00	; 0
    130a:	a0 40       	sbci	r26, 0x00	; 0
    130c:	e1 f7       	brne	.-8      	; 0x1306 <main+0x880>
    130e:	00 c0       	rjmp	.+0      	; 0x1310 <main+0x88a>
    1310:	00 00       	nop
								_delay_ms(700);
								LCD_vClearScreen();
    1312:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
								TMR0_counter = 100*SESSION_TIME_OUT;
    1316:	88 ee       	ldi	r24, 0xE8	; 232
    1318:	93 e0       	ldi	r25, 0x03	; 3
    131a:	90 93 91 02 	sts	0x0291, r25
    131e:	80 93 90 02 	sts	0x0290, r24
    1322:	8d c0       	rjmp	.+282    	; 0x143e <main+0x9b8>
							}
						}
					}
					else if(button>='1' && button<='3')
    1324:	23 30       	cpi	r18, 0x03	; 3
    1326:	08 f0       	brcs	.+2      	; 0x132a <main+0x8a4>
    1328:	8a c0       	rjmp	.+276    	; 0x143e <main+0x9b8>
					{
						SPI_u8Tranceiver(button);
    132a:	81 2f       	mov	r24, r17
    132c:	0e 94 37 0b 	call	0x166e	; 0x166e <SPI_u8Tranceiver>
						time_check_flag = button-48;
    1330:	01 2f       	mov	r16, r17
    1332:	00 53       	subi	r16, 0x30	; 48
						user_current_status = (button-49)*2;
    1334:	11 0f       	add	r17, r17
    1336:	0f 2e       	mov	r0, r31
    1338:	fe e9       	ldi	r31, 0x9E	; 158
    133a:	8f 2e       	mov	r8, r31
    133c:	f0 2d       	mov	r31, r0
    133e:	81 0e       	add	r8, r17
    1340:	7e c0       	rjmp	.+252    	; 0x143e <main+0x9b8>
					}
				}
				else if(mode == '2') // guest
    1342:	92 e3       	ldi	r25, 0x32	; 50
    1344:	b9 16       	cp	r11, r25
    1346:	09 f0       	breq	.+2      	; 0x134a <main+0x8c4>
    1348:	7a c0       	rjmp	.+244    	; 0x143e <main+0x9b8>
				{
					LCD_vClearScreen();
    134a:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
					LCD_vSendString("Choose an Option");
    134e:	8a e4       	ldi	r24, 0x4A	; 74
    1350:	91 e0       	ldi	r25, 0x01	; 1
    1352:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    1356:	2f ef       	ldi	r18, 0xFF	; 255
    1358:	39 e6       	ldi	r19, 0x69	; 105
    135a:	48 e1       	ldi	r20, 0x18	; 24
    135c:	21 50       	subi	r18, 0x01	; 1
    135e:	30 40       	sbci	r19, 0x00	; 0
    1360:	40 40       	sbci	r20, 0x00	; 0
    1362:	e1 f7       	brne	.-8      	; 0x135c <main+0x8d6>
    1364:	00 c0       	rjmp	.+0      	; 0x1366 <main+0x8e0>
    1366:	00 00       	nop
					_delay_ms(1000);
					LCD_vClearScreen();
    1368:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
					LCD_vSendString("1:ROOM1  2:ROOM2");
    136c:	c7 01       	movw	r24, r14
    136e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
					LCD_vMoveCursor(2,1);
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
					LCD_vSendString("3:ROOM3");
    137a:	c3 01       	movw	r24, r6
    137c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
					button = NOT_PRESSED;
					TMR0_counter=0;
    1380:	10 92 91 02 	sts	0x0291, r1
    1384:	10 92 90 02 	sts	0x0290, r1
    1388:	1c c0       	rjmp	.+56     	; 0x13c2 <main+0x93c>
					do
					{
						if(button != NOT_PRESSED)
    138a:	8f 3f       	cpi	r24, 0xFF	; 255
    138c:	d1 f0       	breq	.+52     	; 0x13c2 <main+0x93c>
						{
							LCD_vClearScreen();
    138e:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
							LCD_vSendString("Enter from 1->3");
    1392:	c1 01       	movw	r24, r2
    1394:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	99 e6       	ldi	r25, 0x69	; 105
    139c:	a8 e1       	ldi	r26, 0x18	; 24
    139e:	81 50       	subi	r24, 0x01	; 1
    13a0:	90 40       	sbci	r25, 0x00	; 0
    13a2:	a0 40       	sbci	r26, 0x00	; 0
    13a4:	e1 f7       	brne	.-8      	; 0x139e <main+0x918>
    13a6:	00 c0       	rjmp	.+0      	; 0x13a8 <main+0x922>
    13a8:	00 00       	nop
							_delay_ms(1000);
							LCD_vClearScreen();
    13aa:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
							LCD_vSendString("1:ROOM1  2:ROOM2");
    13ae:	c7 01       	movw	r24, r14
    13b0:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
							LCD_vMoveCursor(2,1);
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	61 e0       	ldi	r22, 0x01	; 1
    13b8:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
							LCD_vSendString("3:ROOM3");
    13bc:	c3 01       	movw	r24, r6
    13be:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
						}
						button = KYP_u8CheckPress();
    13c2:	0e 94 57 03 	call	0x6ae	; 0x6ae <KYP_u8CheckPress>
    13c6:	2f e7       	ldi	r18, 0x7F	; 127
    13c8:	39 ea       	ldi	r19, 0xA9	; 169
    13ca:	43 e0       	ldi	r20, 0x03	; 3
    13cc:	21 50       	subi	r18, 0x01	; 1
    13ce:	30 40       	sbci	r19, 0x00	; 0
    13d0:	40 40       	sbci	r20, 0x00	; 0
    13d2:	e1 f7       	brne	.-8      	; 0x13cc <main+0x946>
    13d4:	00 c0       	rjmp	.+0      	; 0x13d6 <main+0x950>
    13d6:	00 00       	nop
						_delay_ms(150);
					} while (button != '1' && button != '2' && button != '3' && TMR0_counter<(SESSION_TIME_OUT*100));
    13d8:	98 2f       	mov	r25, r24
    13da:	91 53       	subi	r25, 0x31	; 49
    13dc:	93 30       	cpi	r25, 0x03	; 3
    13de:	48 f0       	brcs	.+18     	; 0x13f2 <main+0x96c>
    13e0:	20 91 90 02 	lds	r18, 0x0290
    13e4:	30 91 91 02 	lds	r19, 0x0291
    13e8:	43 e0       	ldi	r20, 0x03	; 3
    13ea:	28 3e       	cpi	r18, 0xE8	; 232
    13ec:	34 07       	cpc	r19, r20
    13ee:	68 f2       	brcs	.-102    	; 0x138a <main+0x904>
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <main+0x97e>
    13f2:	18 2f       	mov	r17, r24
					if(TMR0_counter>=(SESSION_TIME_OUT*100))
    13f4:	80 91 90 02 	lds	r24, 0x0290
    13f8:	90 91 91 02 	lds	r25, 0x0291
    13fc:	53 e0       	ldi	r21, 0x03	; 3
    13fe:	88 3e       	cpi	r24, 0xE8	; 232
    1400:	95 07       	cpc	r25, r21
    1402:	90 f0       	brcs	.+36     	; 0x1428 <main+0x9a2>
					{
						LCD_vClearScreen();
    1404:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
						LCD_vSendString("Session TimedOut");
    1408:	8c e8       	ldi	r24, 0x8C	; 140
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	99 e6       	ldi	r25, 0x69	; 105
    1414:	a8 e1       	ldi	r26, 0x18	; 24
    1416:	81 50       	subi	r24, 0x01	; 1
    1418:	90 40       	sbci	r25, 0x00	; 0
    141a:	a0 40       	sbci	r26, 0x00	; 0
    141c:	e1 f7       	brne	.-8      	; 0x1416 <main+0x990>
    141e:	00 c0       	rjmp	.+0      	; 0x1420 <main+0x99a>
    1420:	00 00       	nop
						_delay_ms(1000);
						LCD_vClearScreen();
    1422:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
    1426:	0b c0       	rjmp	.+22     	; 0x143e <main+0x9b8>
					}
					else
					{
						SPI_u8Tranceiver(button);
    1428:	81 2f       	mov	r24, r17
    142a:	0e 94 37 0b 	call	0x166e	; 0x166e <SPI_u8Tranceiver>
						time_check_flag = button-48;
    142e:	01 2f       	mov	r16, r17
    1430:	00 53       	subi	r16, 0x30	; 48
						user_current_status = (button-49)*2;
    1432:	11 0f       	add	r17, r17
    1434:	0f 2e       	mov	r0, r31
    1436:	fe e9       	ldi	r31, 0x9E	; 158
    1438:	8f 2e       	mov	r8, r31
    143a:	f0 2d       	mov	r31, r0
    143c:	81 0e       	add	r8, r17
					}
				}
				if(time_check_flag != 0)
    143e:	00 23       	and	r16, r16
    1440:	09 f4       	brne	.+2      	; 0x1444 <main+0x9be>
    1442:	e8 c0       	rjmp	.+464    	; 0x1614 <main+0xb8e>
				{
					if(time_check_flag>=1 && time_check_flag<=3)
    1444:	80 2f       	mov	r24, r16
    1446:	81 50       	subi	r24, 0x01	; 1
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	98 f4       	brcc	.+38     	; 0x1472 <main+0x9ec>
					{
						LCD_vClearScreen();
    144c:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
						LCD_vSendString("     ROOM_");
    1450:	85 e1       	ldi	r24, 0x15	; 21
    1452:	92 e0       	ldi	r25, 0x02	; 2
    1454:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
						LCD_vSendNumber(time_check_flag);
    1458:	80 2f       	mov	r24, r16
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <LCD_vSendNumber>
						LCD_vMoveCursor(2,1);
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	61 e0       	ldi	r22, 0x01	; 1
    1464:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
						LCD_vSendString("1:ON     2:OFF");
    1468:	80 e2       	ldi	r24, 0x20	; 32
    146a:	92 e0       	ldi	r25, 0x02	; 2
    146c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    1470:	43 c0       	rjmp	.+134    	; 0x14f8 <main+0xa72>
					}
					else if(time_check_flag==4 || time_check_flag ==5)
    1472:	80 2f       	mov	r24, r16
    1474:	84 50       	subi	r24, 0x04	; 4
    1476:	82 30       	cpi	r24, 0x02	; 2
    1478:	a0 f4       	brcc	.+40     	; 0x14a2 <main+0xa1c>
					{
						LCD_vClearScreen();
    147a:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
						LCD_vSendString("      FAN_");
    147e:	8f e2       	ldi	r24, 0x2F	; 47
    1480:	92 e0       	ldi	r25, 0x02	; 2
    1482:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
						LCD_vSendNumber(time_check_flag-3);
    1486:	80 2f       	mov	r24, r16
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	03 97       	sbiw	r24, 0x03	; 3
    148c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <LCD_vSendNumber>
						LCD_vMoveCursor(2,1);
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
						LCD_vSendString("1:ON     2:OFF");
    1498:	80 e2       	ldi	r24, 0x20	; 32
    149a:	92 e0       	ldi	r25, 0x02	; 2
    149c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    14a0:	2b c0       	rjmp	.+86     	; 0x14f8 <main+0xa72>
					}
					else if(time_check_flag ==6)
    14a2:	06 30       	cpi	r16, 0x06	; 6
    14a4:	61 f5       	brne	.+88     	; 0x14fe <main+0xa78>
					{
						LCD_vClearScreen();
    14a6:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
						LCD_vSendString("      GARAGE");
    14aa:	8a e3       	ldi	r24, 0x3A	; 58
    14ac:	92 e0       	ldi	r25, 0x02	; 2
    14ae:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
						LCD_vMoveCursor(2,1);
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	61 e0       	ldi	r22, 0x01	; 1
    14b6:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
						LCD_vSendString("Status: ");
    14ba:	87 e4       	ldi	r24, 0x47	; 71
    14bc:	92 e0       	ldi	r25, 0x02	; 2
    14be:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
						button = SPI_u8Tranceiver('a');
    14c2:	81 e6       	ldi	r24, 0x61	; 97
    14c4:	0e 94 37 0b 	call	0x166e	; 0x166e <SPI_u8Tranceiver>
						if(button == 'E')
    14c8:	85 34       	cpi	r24, 0x45	; 69
    14ca:	29 f4       	brne	.+10     	; 0x14d6 <main+0xa50>
						{
							LCD_vSendString("Empty");
    14cc:	80 e5       	ldi	r24, 0x50	; 80
    14ce:	92 e0       	ldi	r25, 0x02	; 2
    14d0:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    14d4:	06 c0       	rjmp	.+12     	; 0x14e2 <main+0xa5c>
						}
						else if(button == 'B')
    14d6:	82 34       	cpi	r24, 0x42	; 66
    14d8:	21 f4       	brne	.+8      	; 0x14e2 <main+0xa5c>
						{
							LCD_vSendString("Busy");
    14da:	86 e5       	ldi	r24, 0x56	; 86
    14dc:	92 e0       	ldi	r25, 0x02	; 2
    14de:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    14e2:	2f ef       	ldi	r18, 0xFF	; 255
    14e4:	39 e6       	ldi	r19, 0x69	; 105
    14e6:	48 e1       	ldi	r20, 0x18	; 24
    14e8:	21 50       	subi	r18, 0x01	; 1
    14ea:	30 40       	sbci	r19, 0x00	; 0
    14ec:	40 40       	sbci	r20, 0x00	; 0
    14ee:	e1 f7       	brne	.-8      	; 0x14e8 <main+0xa62>
    14f0:	00 c0       	rjmp	.+0      	; 0x14f2 <main+0xa6c>
    14f2:	00 00       	nop
							LCD_vSendString(" OFF                ");
							_delay_ms(1000);
							LCD_vClearScreen();
						}
					}
					time_check_flag = 0;
    14f4:	00 e0       	ldi	r16, 0x00	; 0
    14f6:	8e c0       	rjmp	.+284    	; 0x1614 <main+0xb8e>
						{
							LCD_vSendString("Busy");
						}
						_delay_ms(1000);
					}
					if(time_check_flag !=6)
    14f8:	06 30       	cpi	r16, 0x06	; 6
    14fa:	09 f4       	brne	.+2      	; 0x14fe <main+0xa78>
    14fc:	8a c0       	rjmp	.+276    	; 0x1612 <main+0xb8c>
					{
						TMR0_counter=0;
    14fe:	10 92 91 02 	sts	0x0291, r1
    1502:	10 92 90 02 	sts	0x0290, r1
						do
						{
							button = KYP_u8CheckPress();
    1506:	0e 94 57 03 	call	0x6ae	; 0x6ae <KYP_u8CheckPress>
    150a:	2f e7       	ldi	r18, 0x7F	; 127
    150c:	39 ea       	ldi	r19, 0xA9	; 169
    150e:	43 e0       	ldi	r20, 0x03	; 3
    1510:	21 50       	subi	r18, 0x01	; 1
    1512:	30 40       	sbci	r19, 0x00	; 0
    1514:	40 40       	sbci	r20, 0x00	; 0
    1516:	e1 f7       	brne	.-8      	; 0x1510 <main+0xa8a>
    1518:	00 c0       	rjmp	.+0      	; 0x151a <main+0xa94>
    151a:	00 00       	nop
							_delay_ms(150);
						} while (button != '1' && button != '2' && TMR0_counter<(SESSION_TIME_OUT*100));
    151c:	98 2f       	mov	r25, r24
    151e:	91 53       	subi	r25, 0x31	; 49
    1520:	92 30       	cpi	r25, 0x02	; 2
    1522:	48 f0       	brcs	.+18     	; 0x1536 <main+0xab0>
    1524:	80 91 90 02 	lds	r24, 0x0290
    1528:	90 91 91 02 	lds	r25, 0x0291
    152c:	33 e0       	ldi	r19, 0x03	; 3
    152e:	88 3e       	cpi	r24, 0xE8	; 232
    1530:	93 07       	cpc	r25, r19
    1532:	48 f3       	brcs	.-46     	; 0x1506 <main+0xa80>
    1534:	08 c0       	rjmp	.+16     	; 0x1546 <main+0xac0>
						if(TMR0_counter>=(SESSION_TIME_OUT*100))
    1536:	20 91 90 02 	lds	r18, 0x0290
    153a:	30 91 91 02 	lds	r19, 0x0291
    153e:	43 e0       	ldi	r20, 0x03	; 3
    1540:	28 3e       	cpi	r18, 0xE8	; 232
    1542:	34 07       	cpc	r19, r20
    1544:	90 f0       	brcs	.+36     	; 0x156a <main+0xae4>
						{
							LCD_vClearScreen();
    1546:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
							LCD_vSendString("Session TimedOut");
    154a:	8c e8       	ldi	r24, 0x8C	; 140
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	99 e6       	ldi	r25, 0x69	; 105
    1556:	a8 e1       	ldi	r26, 0x18	; 24
    1558:	81 50       	subi	r24, 0x01	; 1
    155a:	90 40       	sbci	r25, 0x00	; 0
    155c:	a0 40       	sbci	r26, 0x00	; 0
    155e:	e1 f7       	brne	.-8      	; 0x1558 <main+0xad2>
    1560:	00 c0       	rjmp	.+0      	; 0x1562 <main+0xadc>
    1562:	00 00       	nop
							_delay_ms(1000);
							LCD_vClearScreen();
    1564:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
    1568:	0c c0       	rjmp	.+24     	; 0x1582 <main+0xafc>
						}
						else if(button == '1')
    156a:	81 33       	cpi	r24, 0x31	; 49
    156c:	21 f4       	brne	.+8      	; 0x1576 <main+0xaf0>
						{
							SPI_u8Tranceiver('N');
    156e:	8e e4       	ldi	r24, 0x4E	; 78
    1570:	0e 94 37 0b 	call	0x166e	; 0x166e <SPI_u8Tranceiver>
    1574:	06 c0       	rjmp	.+12     	; 0x1582 <main+0xafc>
						}
						else if(button == '2')
    1576:	82 33       	cpi	r24, 0x32	; 50
    1578:	21 f4       	brne	.+8      	; 0x1582 <main+0xafc>
						{
							SPI_u8Tranceiver('F');
    157a:	86 e4       	ldi	r24, 0x46	; 70
    157c:	0e 94 37 0b 	call	0x166e	; 0x166e <SPI_u8Tranceiver>
							user_current_status ++;
    1580:	83 94       	inc	r8
						}
						if((user_current_status/2)>=0 && (user_current_status/2)<=2)
    1582:	95 e0       	ldi	r25, 0x05	; 5
    1584:	98 15       	cp	r25, r8
    1586:	78 f0       	brcs	.+30     	; 0x15a6 <main+0xb20>
						{
							LCD_vMoveCursor(2,1);
    1588:	82 e0       	ldi	r24, 0x02	; 2
    158a:	61 e0       	ldi	r22, 0x01	; 1
    158c:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
							LCD_vSendString("ROOM_");
    1590:	8b e5       	ldi	r24, 0x5B	; 91
    1592:	92 e0       	ldi	r25, 0x02	; 2
    1594:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
							LCD_vSendNumber((user_current_status/2)+1);
    1598:	88 2d       	mov	r24, r8
    159a:	86 95       	lsr	r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	01 96       	adiw	r24, 0x01	; 1
    15a0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <LCD_vSendNumber>
    15a4:	12 c0       	rjmp	.+36     	; 0x15ca <main+0xb44>
						}
						else if((user_current_status/2)==3 || (user_current_status/2)==4)
    15a6:	88 2d       	mov	r24, r8
    15a8:	86 50       	subi	r24, 0x06	; 6
    15aa:	84 30       	cpi	r24, 0x04	; 4
    15ac:	70 f4       	brcc	.+28     	; 0x15ca <main+0xb44>
						{
							LCD_vMoveCursor(2,1);
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	61 e0       	ldi	r22, 0x01	; 1
    15b2:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_vMoveCursor>
							LCD_vSendString("FAN_");
    15b6:	81 e6       	ldi	r24, 0x61	; 97
    15b8:	92 e0       	ldi	r25, 0x02	; 2
    15ba:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
							LCD_vSendNumber((user_current_status/2)-2);
    15be:	88 2d       	mov	r24, r8
    15c0:	86 95       	lsr	r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 97       	sbiw	r24, 0x02	; 2
    15c6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <LCD_vSendNumber>
						}
						if(user_current_status%2==0)
    15ca:	80 fc       	sbrc	r8, 0
    15cc:	11 c0       	rjmp	.+34     	; 0x15f0 <main+0xb6a>
						{
							LCD_vSendString(" ON                ");
    15ce:	86 e6       	ldi	r24, 0x66	; 102
    15d0:	92 e0       	ldi	r25, 0x02	; 2
    15d2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    15d6:	2f ef       	ldi	r18, 0xFF	; 255
    15d8:	39 e6       	ldi	r19, 0x69	; 105
    15da:	48 e1       	ldi	r20, 0x18	; 24
    15dc:	21 50       	subi	r18, 0x01	; 1
    15de:	30 40       	sbci	r19, 0x00	; 0
    15e0:	40 40       	sbci	r20, 0x00	; 0
    15e2:	e1 f7       	brne	.-8      	; 0x15dc <main+0xb56>
    15e4:	00 c0       	rjmp	.+0      	; 0x15e6 <main+0xb60>
    15e6:	00 00       	nop
							_delay_ms(1000);
							LCD_vClearScreen();
    15e8:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
							LCD_vSendString(" OFF                ");
							_delay_ms(1000);
							LCD_vClearScreen();
						}
					}
					time_check_flag = 0;
    15ec:	00 e0       	ldi	r16, 0x00	; 0
    15ee:	12 c0       	rjmp	.+36     	; 0x1614 <main+0xb8e>
							_delay_ms(1000);
							LCD_vClearScreen();
						}
						else
						{
							LCD_vSendString(" OFF                ");
    15f0:	8a e7       	ldi	r24, 0x7A	; 122
    15f2:	92 e0       	ldi	r25, 0x02	; 2
    15f4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_vSendString>
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	99 e6       	ldi	r25, 0x69	; 105
    15fc:	a8 e1       	ldi	r26, 0x18	; 24
    15fe:	81 50       	subi	r24, 0x01	; 1
    1600:	90 40       	sbci	r25, 0x00	; 0
    1602:	a0 40       	sbci	r26, 0x00	; 0
    1604:	e1 f7       	brne	.-8      	; 0x15fe <main+0xb78>
    1606:	00 c0       	rjmp	.+0      	; 0x1608 <main+0xb82>
    1608:	00 00       	nop
							_delay_ms(1000);
							LCD_vClearScreen();
    160a:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
						}
					}
					time_check_flag = 0;
    160e:	00 e0       	ldi	r16, 0x00	; 0
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <main+0xb8e>
    1612:	00 e0       	ldi	r16, 0x00	; 0
			{
				LCD_vSendString("Welcome Guest!");
				_delay_ms(1000);
			}
			TMR0_counter = 0;
			while(TMR0_counter<(SESSION_TIME_OUT*100))
    1614:	80 91 90 02 	lds	r24, 0x0290
    1618:	90 91 91 02 	lds	r25, 0x0291
    161c:	a3 e0       	ldi	r26, 0x03	; 3
    161e:	88 3e       	cpi	r24, 0xE8	; 232
    1620:	9a 07       	cpc	r25, r26
    1622:	08 f4       	brcc	.+2      	; 0x1626 <main+0xba0>
    1624:	5f cc       	rjmp	.-1858   	; 0xee4 <main+0x45e>
    1626:	a0 2e       	mov	r10, r16
    1628:	b3 e0       	ldi	r27, 0x03	; 3
    162a:	bb 87       	std	Y+11, r27	; 0x0b
    162c:	20 cb       	rjmp	.-2496   	; 0xc6e <main+0x1e8>
				_delay_ms(1000);
				LCD_vClearScreen();
			}
		}
		while(check == 1 && trials>0);
		LCD_vClearScreen();
    162e:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_vClearScreen>
    1632:	d8 cb       	rjmp	.-2128   	; 0xde4 <main+0x35e>

00001634 <SPI_vInit>:

void SPI_vInit(void)
{
	#if defined SPI_MASTER_MC
	//set MOSI,SS,SCK as outputs
	DIO_vSetPinDir(SPI_PORT,MOSI_PIN,PIN_OUTPUT);
    1634:	82 e4       	ldi	r24, 0x42	; 66
    1636:	65 e0       	ldi	r22, 0x05	; 5
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir(SPI_PORT,SS_PIN,PIN_OUTPUT);
    163e:	82 e4       	ldi	r24, 0x42	; 66
    1640:	64 e0       	ldi	r22, 0x04	; 4
    1642:	41 e0       	ldi	r20, 0x01	; 1
    1644:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir(SPI_PORT,SCK_PIN,PIN_OUTPUT);
    1648:	82 e4       	ldi	r24, 0x42	; 66
    164a:	67 e0       	ldi	r22, 0x07	; 7
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	//set MISO pin as input
	DIO_vSetPinDir(SPI_PORT,MISO_PIN,PIN_INPUT);
    1652:	82 e4       	ldi	r24, 0x42	; 66
    1654:	66 e0       	ldi	r22, 0x06	; 6
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	//Enable Master mode
	SET_BIT(SPCR,MSTR);
    165c:	6c 9a       	sbi	0x0d, 4	; 13
	//set clk/16
	SET_BIT(SPCR,SPR0);
    165e:	68 9a       	sbi	0x0d, 0	; 13
	//Enable SPI
	SET_BIT(SPCR,SPE);
    1660:	6e 9a       	sbi	0x0d, 6	; 13
	DIO_vWritePin(SPI_PORT,SS_PIN,HIGH);
    1662:	82 e4       	ldi	r24, 0x42	; 66
    1664:	64 e0       	ldi	r22, 0x04	; 4
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vSetPinDir(SPI_PORT,SCK_PIN,PIN_INPUT);
	//Enable SPI
	SET_BIT(SPCR,SPE);
	//MSTR default value =0(slave select)
	#endif
}
    166c:	08 95       	ret

0000166e <SPI_u8Tranceiver>:

uint8 SPI_u8Tranceiver(uint8 Copy_u8Data)
{
    166e:	cf 93       	push	r28
    1670:	c8 2f       	mov	r28, r24
	#if defined SPI_MASTER_MC
	//send 0 to activate the slave
	DIO_vWritePin(SPI_PORT,SS_PIN,LOW);
    1672:	82 e4       	ldi	r24, 0x42	; 66
    1674:	64 e0       	ldi	r22, 0x04	; 4
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	#endif
	//put data at the SPI data register
	SPDR = Copy_u8Data;
    167c:	cf b9       	out	0x0f, r28	; 15
	while(READ_BIT(SPSR,SPIF)==0);
    167e:	77 9b       	sbis	0x0e, 7	; 14
    1680:	fe cf       	rjmp	.-4      	; 0x167e <SPI_u8Tranceiver+0x10>
	return SPDR;
    1682:	8f b1       	in	r24, 0x0f	; 15
}
    1684:	cf 91       	pop	r28
    1686:	08 95       	ret

00001688 <SPI_vMasterSendString>:

void SPI_vMasterSendString(uint8* Copy_u8StringPointer)
{
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	ec 01       	movw	r28, r24
	uint8 LOC_receive;
	while(*Copy_u8StringPointer != '\0')
    168e:	88 81       	ld	r24, Y
    1690:	88 23       	and	r24, r24
    1692:	79 f0       	breq	.+30     	; 0x16b2 <SPI_vMasterSendString+0x2a>
	SPDR = Copy_u8Data;
	while(READ_BIT(SPSR,SPIF)==0);
	return SPDR;
}

void SPI_vMasterSendString(uint8* Copy_u8StringPointer)
    1694:	21 96       	adiw	r28, 0x01	; 1
{
	uint8 LOC_receive;
	while(*Copy_u8StringPointer != '\0')
	{
		LOC_receive = SPI_u8Tranceiver(*Copy_u8StringPointer);
    1696:	0e 94 37 0b 	call	0x166e	; 0x166e <SPI_u8Tranceiver>
    169a:	8f ef       	ldi	r24, 0xFF	; 255
    169c:	91 ee       	ldi	r25, 0xE1	; 225
    169e:	a4 e0       	ldi	r26, 0x04	; 4
    16a0:	81 50       	subi	r24, 0x01	; 1
    16a2:	90 40       	sbci	r25, 0x00	; 0
    16a4:	a0 40       	sbci	r26, 0x00	; 0
    16a6:	e1 f7       	brne	.-8      	; 0x16a0 <SPI_vMasterSendString+0x18>
    16a8:	00 c0       	rjmp	.+0      	; 0x16aa <SPI_vMasterSendString+0x22>
    16aa:	00 00       	nop
}

void SPI_vMasterSendString(uint8* Copy_u8StringPointer)
{
	uint8 LOC_receive;
	while(*Copy_u8StringPointer != '\0')
    16ac:	89 91       	ld	r24, Y+
    16ae:	88 23       	and	r24, r24
    16b0:	91 f7       	brne	.-28     	; 0x1696 <SPI_vMasterSendString+0xe>
	{
		LOC_receive = SPI_u8Tranceiver(*Copy_u8StringPointer);
		Copy_u8StringPointer++;
		_delay_ms(200);
	}
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	08 95       	ret

000016b8 <TMR0_OVF_SetCallBack>:
void (*GP_TMR0_COMP)(void) = '\0';

/*call back functions */
void TMR0_OVF_SetCallBack(void(*ptr)(void))
{
	GP_TMR0_OVF=ptr;
    16b8:	90 93 95 02 	sts	0x0295, r25
    16bc:	80 93 94 02 	sts	0x0294, r24
}
    16c0:	08 95       	ret

000016c2 <TMR0_COMP_SetCallBack>:

void TMR0_COMP_SetCallBack(void(*ptr)(void))
{
	GP_TMR0_COMP=ptr;
    16c2:	90 93 93 02 	sts	0x0293, r25
    16c6:	80 93 92 02 	sts	0x0292, r24
}
    16ca:	08 95       	ret

000016cc <TMR0_vInit>:
	SET_BIT(TIMSK,TOIE0);
	
	
	#elif defined CTC_MODE
	//set CTC mode WGM01:0 = 10
	SET_BIT(TCCR0,WGM01);
    16cc:	83 b7       	in	r24, 0x33	; 51
    16ce:	88 60       	ori	r24, 0x08	; 8
    16d0:	83 bf       	out	0x33, r24	; 51
	
	//load OCR0 value (157 -> 20msec at ISR)
	OCR0 = 79;//10msec at ISR
    16d2:	8f e4       	ldi	r24, 0x4F	; 79
    16d4:	8c bf       	out	0x3c, r24	; 60
	
	//set timer clk , prescale /1024 CS00:2=101
	SET_BIT(TCCR0,CS00);
    16d6:	83 b7       	in	r24, 0x33	; 51
    16d8:	81 60       	ori	r24, 0x01	; 1
    16da:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    16dc:	83 b7       	in	r24, 0x33	; 51
    16de:	84 60       	ori	r24, 0x04	; 4
    16e0:	83 bf       	out	0x33, r24	; 51
	
	//enable general interrupt
	GIE_EnableInterrupt();
    16e2:	0e 94 22 03 	call	0x644	; 0x644 <GIE_EnableInterrupt>
	
	//set OverFlow interrupt Enable
	SET_BIT(TIMSK,OCIE0);
    16e6:	89 b7       	in	r24, 0x39	; 57
    16e8:	82 60       	ori	r24, 0x02	; 2
    16ea:	89 bf       	out	0x39, r24	; 57
	//Set OC0 on compare match when up-counting COM01:0 = 11
	SET_BIT(TCCR0,COM00);
	SET_BIT(TCCR0,COM01);
	
	#endif
}
    16ec:	08 95       	ret

000016ee <__vector_10>:


/*ISR(TIMER0_COMP_vect) */
void __vector_10()__attribute__((signal)) ;
void __vector_10()
{
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	11 24       	eor	r1, r1
    16f8:	2f 93       	push	r18
    16fa:	3f 93       	push	r19
    16fc:	4f 93       	push	r20
    16fe:	5f 93       	push	r21
    1700:	6f 93       	push	r22
    1702:	7f 93       	push	r23
    1704:	8f 93       	push	r24
    1706:	9f 93       	push	r25
    1708:	af 93       	push	r26
    170a:	bf 93       	push	r27
    170c:	ef 93       	push	r30
    170e:	ff 93       	push	r31
	if (GP_TMR0_COMP != '\0')
    1710:	e0 91 92 02 	lds	r30, 0x0292
    1714:	f0 91 93 02 	lds	r31, 0x0293
    1718:	30 97       	sbiw	r30, 0x00	; 0
    171a:	09 f0       	breq	.+2      	; 0x171e <__vector_10+0x30>
	{
		GP_TMR0_COMP();
    171c:	09 95       	icall
	}
}
    171e:	ff 91       	pop	r31
    1720:	ef 91       	pop	r30
    1722:	bf 91       	pop	r27
    1724:	af 91       	pop	r26
    1726:	9f 91       	pop	r25
    1728:	8f 91       	pop	r24
    172a:	7f 91       	pop	r23
    172c:	6f 91       	pop	r22
    172e:	5f 91       	pop	r21
    1730:	4f 91       	pop	r20
    1732:	3f 91       	pop	r19
    1734:	2f 91       	pop	r18
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	0f 90       	pop	r0
    173c:	1f 90       	pop	r1
    173e:	18 95       	reti

00001740 <__vector_11>:

/*ISR(TIMER0_OVF_vect) */
void __vector_11()__attribute__((signal)) ;
void __vector_11()
{
    1740:	1f 92       	push	r1
    1742:	0f 92       	push	r0
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	0f 92       	push	r0
    1748:	11 24       	eor	r1, r1
    174a:	2f 93       	push	r18
    174c:	3f 93       	push	r19
    174e:	4f 93       	push	r20
    1750:	5f 93       	push	r21
    1752:	6f 93       	push	r22
    1754:	7f 93       	push	r23
    1756:	8f 93       	push	r24
    1758:	9f 93       	push	r25
    175a:	af 93       	push	r26
    175c:	bf 93       	push	r27
    175e:	ef 93       	push	r30
    1760:	ff 93       	push	r31
	if (GP_TMR0_OVF != '\0')
    1762:	e0 91 94 02 	lds	r30, 0x0294
    1766:	f0 91 95 02 	lds	r31, 0x0295
    176a:	30 97       	sbiw	r30, 0x00	; 0
    176c:	09 f0       	breq	.+2      	; 0x1770 <__vector_11+0x30>
	{
		GP_TMR0_OVF();
    176e:	09 95       	icall
	}
}
    1770:	ff 91       	pop	r31
    1772:	ef 91       	pop	r30
    1774:	bf 91       	pop	r27
    1776:	af 91       	pop	r26
    1778:	9f 91       	pop	r25
    177a:	8f 91       	pop	r24
    177c:	7f 91       	pop	r23
    177e:	6f 91       	pop	r22
    1780:	5f 91       	pop	r21
    1782:	4f 91       	pop	r20
    1784:	3f 91       	pop	r19
    1786:	2f 91       	pop	r18
    1788:	0f 90       	pop	r0
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	0f 90       	pop	r0
    178e:	1f 90       	pop	r1
    1790:	18 95       	reti

00001792 <__udivmodhi4>:
    1792:	aa 1b       	sub	r26, r26
    1794:	bb 1b       	sub	r27, r27
    1796:	51 e1       	ldi	r21, 0x11	; 17
    1798:	07 c0       	rjmp	.+14     	; 0x17a8 <__udivmodhi4_ep>

0000179a <__udivmodhi4_loop>:
    179a:	aa 1f       	adc	r26, r26
    179c:	bb 1f       	adc	r27, r27
    179e:	a6 17       	cp	r26, r22
    17a0:	b7 07       	cpc	r27, r23
    17a2:	10 f0       	brcs	.+4      	; 0x17a8 <__udivmodhi4_ep>
    17a4:	a6 1b       	sub	r26, r22
    17a6:	b7 0b       	sbc	r27, r23

000017a8 <__udivmodhi4_ep>:
    17a8:	88 1f       	adc	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	5a 95       	dec	r21
    17ae:	a9 f7       	brne	.-22     	; 0x179a <__udivmodhi4_loop>
    17b0:	80 95       	com	r24
    17b2:	90 95       	com	r25
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	08 95       	ret

000017ba <_exit>:
    17ba:	f8 94       	cli

000017bc <__stop_program>:
    17bc:	ff cf       	rjmp	.-2      	; 0x17bc <__stop_program>
